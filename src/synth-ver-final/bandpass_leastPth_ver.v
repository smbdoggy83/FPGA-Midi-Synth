// -------------------------------------------------------------
//
// Module: bandpass_leastPth_ver
// Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
// Generated on: 2022-05-01 14:21:29
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: bandpass_leastPth_ver
// TargetLanguage: Verilog
// TestBenchStimulus: step ramp chirp 
// GenerateHDLTestBench: off

// Filter Specifications:
//
// Sample Rate            : N/A (normalized frequency)
// Response               : Bandpass
// Specification          : Fst1,Fp1,Fp2,Fst2,Ast1,Ap,Ast2
// First Stopband Edge    : 0.35
// Second Stopband Atten. : 60 dB
// Passband Ripple        : 1 dB
// Second Passband Edge   : 0.55
// First Passband Edge    : 0.45
// Second Stopband Edge   : 0.65
// First Stopband Atten.  : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II, Second-Order Sections
// Number of Sections  : 12
// Stable              : Yes
// Linear Phase        : No
// Arithmetic          : fixed
// Numerator           : s24,21 -> [-4 4)
// Denominator         : s24,22 -> [-2 2)
// Scale Values        : s24,34 -> [-4.882812e-04 4.882812e-04)
// Input               : s24,23 -> [-1 1)
// Section Input       : s24,28 -> [-3.125000e-02 3.125000e-02)
// Section Output      : s24,18 -> [-32 32)
// Output              : s24,18 -> [-32 32)
// State               : s24,23 -> [-1 1)
// Numerator Prod      : s48,44 -> [-8 8)
// Denominator Prod    : s48,45 -> [-4 4)
// Numerator Accum     : s40,34 -> [-32 32)
// Denominator Accum   : s40,35 -> [-16 16)
// Round Mode          : convergent
// Overflow Mode       : wrap
// Cast Before Sum     : true
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module bandpass_leastPth_ver
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [23:0] filter_in; //sfix24_En23
  output  signed [23:0] filter_out; //sfix24_En18

////////////////////////////////////////////////////////////////
//Module Architecture: bandpass_leastPth_ver
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [23:0] scaleconst1 = 24'b101011011110111000111100; //sfix24_En34
  parameter signed [23:0] coeff_b1_section1 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section1 = 24'b110100011011000001111000; //sfix24_En21
  parameter signed [23:0] coeff_b3_section1 = 24'b000011100101000000000000; //sfix24_En21
  parameter signed [23:0] coeff_a2_section1 = 24'b100001111110000111100011; //sfix24_En22
  parameter signed [23:0] coeff_a3_section1 = 24'b001110011101001010101001; //sfix24_En22
  parameter signed [23:0] coeff_b1_section2 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section2 = 24'b000100100110001000011001; //sfix24_En21
  parameter signed [23:0] coeff_b3_section2 = 24'b000000001100011011110110; //sfix24_En21
  parameter signed [23:0] coeff_a2_section2 = 24'b100001011111010111011100; //sfix24_En22
  parameter signed [23:0] coeff_a3_section2 = 24'b001111101000010110000110; //sfix24_En22
  parameter signed [23:0] coeff_b1_section3 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section3 = 24'b110000110101001110110011; //sfix24_En21
  parameter signed [23:0] coeff_b3_section3 = 24'b000111111111100111000111; //sfix24_En21
  parameter signed [23:0] coeff_a2_section3 = 24'b100010000010100101100000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section3 = 24'b001110110011110111000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section4 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section4 = 24'b110111010000001101100010; //sfix24_En21
  parameter signed [23:0] coeff_b3_section4 = 24'b000000110000001010010100; //sfix24_En21
  parameter signed [23:0] coeff_a2_section4 = 24'b100001000101000011101110; //sfix24_En22
  parameter signed [23:0] coeff_a3_section4 = 24'b001111000101010011101000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section5 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section5 = 24'b111110111101010001101111; //sfix24_En21
  parameter signed [23:0] coeff_b3_section5 = 24'b000010111111110111001010; //sfix24_En21
  parameter signed [23:0] coeff_a2_section5 = 24'b100000010110000101001001; //sfix24_En22
  parameter signed [23:0] coeff_a3_section5 = 24'b001111101111101101001010; //sfix24_En22
  parameter signed [23:0] coeff_b1_section6 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section6 = 24'b101010010001111011001110; //sfix24_En21
  parameter signed [23:0] coeff_b3_section6 = 24'b010011001000111000100001; //sfix24_En21
  parameter signed [23:0] coeff_a2_section6 = 24'b111001111000000110100100; //sfix24_En22
  parameter signed [23:0] coeff_a3_section6 = 24'b000001110110000100100111; //sfix24_En22
  parameter signed [23:0] coeff_b1_section7 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section7 = 24'b111001001000111101111110; //sfix24_En21
  parameter signed [23:0] coeff_b3_section7 = 24'b000100100100111010001001; //sfix24_En21
  parameter signed [23:0] coeff_a2_section7 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section7 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section8 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section8 = 24'b110011011010001000010010; //sfix24_En21
  parameter signed [23:0] coeff_b3_section8 = 24'b000100100101111111111011; //sfix24_En21
  parameter signed [23:0] coeff_a2_section8 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section8 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section9 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section9 = 24'b000010101110011010000111; //sfix24_En21
  parameter signed [23:0] coeff_b3_section9 = 24'b000000001001110001010100; //sfix24_En21
  parameter signed [23:0] coeff_a2_section9 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section9 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section10 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section10 = 24'b000010011011111111001111; //sfix24_En21
  parameter signed [23:0] coeff_b3_section10 = 24'b000000000001110110010111; //sfix24_En21
  parameter signed [23:0] coeff_a2_section10 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section10 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section11 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section11 = 24'b111111111011000011001001; //sfix24_En21
  parameter signed [23:0] coeff_b3_section11 = 24'b000000000000000110000100; //sfix24_En21
  parameter signed [23:0] coeff_a2_section11 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section11 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_b1_section12 = 24'b001000000000000000000000; //sfix24_En21
  parameter signed [23:0] coeff_b2_section12 = 24'b110111100110101100001000; //sfix24_En21
  parameter signed [23:0] coeff_b3_section12 = 24'b000000011001011001010100; //sfix24_En21
  parameter signed [23:0] coeff_a2_section12 = 24'b000000000000000000000000; //sfix24_En22
  parameter signed [23:0] coeff_a3_section12 = 24'b000000000000000000000000; //sfix24_En22
  // Signals
  reg  signed [23:0] input_register; // sfix24_En23
  wire signed [52:0] scale1; // sfix53_En57
  wire signed [47:0] mul_temp; // sfix48_En57
  wire signed [23:0] scaletypeconvert1; // sfix24_En28
  // Section 1 Signals 
  wire signed [39:0] a1sum1; // sfix40_En35
  wire signed [39:0] a2sum1; // sfix40_En35
  wire signed [39:0] b1sum1; // sfix40_En34
  wire signed [39:0] b2sum1; // sfix40_En34
  wire signed [23:0] typeconvert1; // sfix24_En23
  reg  signed [23:0] delay_section1 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv1; // sfix40_En35
  wire signed [47:0] a2mul1; // sfix48_En45
  wire signed [47:0] a3mul1; // sfix48_En45
  wire signed [47:0] b1mul1; // sfix48_En44
  wire signed [47:0] b2mul1; // sfix48_En44
  wire signed [47:0] b3mul1; // sfix48_En44
  wire signed [39:0] sub_cast; // sfix40_En35
  wire signed [39:0] sub_cast_1; // sfix40_En35
  wire signed [40:0] sub_temp; // sfix41_En35
  wire signed [39:0] sub_cast_2; // sfix40_En35
  wire signed [39:0] sub_cast_3; // sfix40_En35
  wire signed [40:0] sub_temp_1; // sfix41_En35
  wire signed [39:0] b1multypeconvert1; // sfix40_En34
  wire signed [39:0] add_cast; // sfix40_En34
  wire signed [39:0] add_cast_1; // sfix40_En34
  wire signed [40:0] add_temp; // sfix41_En34
  wire signed [39:0] add_cast_2; // sfix40_En34
  wire signed [39:0] add_cast_3; // sfix40_En34
  wire signed [40:0] add_temp_1; // sfix41_En34
  wire signed [39:0] section_result1; // sfix40_En35
  // Section 2 Signals 
  wire signed [39:0] a1sum2; // sfix40_En35
  wire signed [39:0] a2sum2; // sfix40_En35
  wire signed [39:0] b1sum2; // sfix40_En34
  wire signed [39:0] b2sum2; // sfix40_En34
  wire signed [23:0] typeconvert2; // sfix24_En23
  reg  signed [23:0] delay_section2 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv2; // sfix40_En35
  wire signed [47:0] a2mul2; // sfix48_En45
  wire signed [47:0] a3mul2; // sfix48_En45
  wire signed [47:0] b1mul2; // sfix48_En44
  wire signed [47:0] b2mul2; // sfix48_En44
  wire signed [47:0] b3mul2; // sfix48_En44
  wire signed [39:0] sub_cast_4; // sfix40_En35
  wire signed [39:0] sub_cast_5; // sfix40_En35
  wire signed [40:0] sub_temp_2; // sfix41_En35
  wire signed [39:0] sub_cast_6; // sfix40_En35
  wire signed [39:0] sub_cast_7; // sfix40_En35
  wire signed [40:0] sub_temp_3; // sfix41_En35
  wire signed [39:0] b1multypeconvert2; // sfix40_En34
  wire signed [39:0] add_cast_4; // sfix40_En34
  wire signed [39:0] add_cast_5; // sfix40_En34
  wire signed [40:0] add_temp_2; // sfix41_En34
  wire signed [39:0] add_cast_6; // sfix40_En34
  wire signed [39:0] add_cast_7; // sfix40_En34
  wire signed [40:0] add_temp_3; // sfix41_En34
  wire signed [39:0] section_result2; // sfix40_En35
  // Section 3 Signals 
  wire signed [39:0] a1sum3; // sfix40_En35
  wire signed [39:0] a2sum3; // sfix40_En35
  wire signed [39:0] b1sum3; // sfix40_En34
  wire signed [39:0] b2sum3; // sfix40_En34
  wire signed [23:0] typeconvert3; // sfix24_En23
  reg  signed [23:0] delay_section3 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv3; // sfix40_En35
  wire signed [47:0] a2mul3; // sfix48_En45
  wire signed [47:0] a3mul3; // sfix48_En45
  wire signed [47:0] b1mul3; // sfix48_En44
  wire signed [47:0] b2mul3; // sfix48_En44
  wire signed [47:0] b3mul3; // sfix48_En44
  wire signed [39:0] sub_cast_8; // sfix40_En35
  wire signed [39:0] sub_cast_9; // sfix40_En35
  wire signed [40:0] sub_temp_4; // sfix41_En35
  wire signed [39:0] sub_cast_10; // sfix40_En35
  wire signed [39:0] sub_cast_11; // sfix40_En35
  wire signed [40:0] sub_temp_5; // sfix41_En35
  wire signed [39:0] b1multypeconvert3; // sfix40_En34
  wire signed [39:0] add_cast_8; // sfix40_En34
  wire signed [39:0] add_cast_9; // sfix40_En34
  wire signed [40:0] add_temp_4; // sfix41_En34
  wire signed [39:0] add_cast_10; // sfix40_En34
  wire signed [39:0] add_cast_11; // sfix40_En34
  wire signed [40:0] add_temp_5; // sfix41_En34
  wire signed [39:0] section_result3; // sfix40_En35
  // Section 4 Signals 
  wire signed [39:0] a1sum4; // sfix40_En35
  wire signed [39:0] a2sum4; // sfix40_En35
  wire signed [39:0] b1sum4; // sfix40_En34
  wire signed [39:0] b2sum4; // sfix40_En34
  wire signed [23:0] typeconvert4; // sfix24_En23
  reg  signed [23:0] delay_section4 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv4; // sfix40_En35
  wire signed [47:0] a2mul4; // sfix48_En45
  wire signed [47:0] a3mul4; // sfix48_En45
  wire signed [47:0] b1mul4; // sfix48_En44
  wire signed [47:0] b2mul4; // sfix48_En44
  wire signed [47:0] b3mul4; // sfix48_En44
  wire signed [39:0] sub_cast_12; // sfix40_En35
  wire signed [39:0] sub_cast_13; // sfix40_En35
  wire signed [40:0] sub_temp_6; // sfix41_En35
  wire signed [39:0] sub_cast_14; // sfix40_En35
  wire signed [39:0] sub_cast_15; // sfix40_En35
  wire signed [40:0] sub_temp_7; // sfix41_En35
  wire signed [39:0] b1multypeconvert4; // sfix40_En34
  wire signed [39:0] add_cast_12; // sfix40_En34
  wire signed [39:0] add_cast_13; // sfix40_En34
  wire signed [40:0] add_temp_6; // sfix41_En34
  wire signed [39:0] add_cast_14; // sfix40_En34
  wire signed [39:0] add_cast_15; // sfix40_En34
  wire signed [40:0] add_temp_7; // sfix41_En34
  wire signed [39:0] section_result4; // sfix40_En35
  // Section 5 Signals 
  wire signed [39:0] a1sum5; // sfix40_En35
  wire signed [39:0] a2sum5; // sfix40_En35
  wire signed [39:0] b1sum5; // sfix40_En34
  wire signed [39:0] b2sum5; // sfix40_En34
  wire signed [23:0] typeconvert5; // sfix24_En23
  reg  signed [23:0] delay_section5 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv5; // sfix40_En35
  wire signed [47:0] a2mul5; // sfix48_En45
  wire signed [47:0] a3mul5; // sfix48_En45
  wire signed [47:0] b1mul5; // sfix48_En44
  wire signed [47:0] b2mul5; // sfix48_En44
  wire signed [47:0] b3mul5; // sfix48_En44
  wire signed [39:0] sub_cast_16; // sfix40_En35
  wire signed [39:0] sub_cast_17; // sfix40_En35
  wire signed [40:0] sub_temp_8; // sfix41_En35
  wire signed [39:0] sub_cast_18; // sfix40_En35
  wire signed [39:0] sub_cast_19; // sfix40_En35
  wire signed [40:0] sub_temp_9; // sfix41_En35
  wire signed [39:0] b1multypeconvert5; // sfix40_En34
  wire signed [39:0] add_cast_16; // sfix40_En34
  wire signed [39:0] add_cast_17; // sfix40_En34
  wire signed [40:0] add_temp_8; // sfix41_En34
  wire signed [39:0] add_cast_18; // sfix40_En34
  wire signed [39:0] add_cast_19; // sfix40_En34
  wire signed [40:0] add_temp_9; // sfix41_En34
  wire signed [39:0] section_result5; // sfix40_En35
  // Section 6 Signals 
  wire signed [39:0] a1sum6; // sfix40_En35
  wire signed [39:0] a2sum6; // sfix40_En35
  wire signed [39:0] b1sum6; // sfix40_En34
  wire signed [39:0] b2sum6; // sfix40_En34
  wire signed [23:0] typeconvert6; // sfix24_En23
  reg  signed [23:0] delay_section6 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv6; // sfix40_En35
  wire signed [47:0] a2mul6; // sfix48_En45
  wire signed [47:0] a3mul6; // sfix48_En45
  wire signed [47:0] b1mul6; // sfix48_En44
  wire signed [47:0] b2mul6; // sfix48_En44
  wire signed [47:0] b3mul6; // sfix48_En44
  wire signed [39:0] sub_cast_20; // sfix40_En35
  wire signed [39:0] sub_cast_21; // sfix40_En35
  wire signed [40:0] sub_temp_10; // sfix41_En35
  wire signed [39:0] sub_cast_22; // sfix40_En35
  wire signed [39:0] sub_cast_23; // sfix40_En35
  wire signed [40:0] sub_temp_11; // sfix41_En35
  wire signed [39:0] b1multypeconvert6; // sfix40_En34
  wire signed [39:0] add_cast_20; // sfix40_En34
  wire signed [39:0] add_cast_21; // sfix40_En34
  wire signed [40:0] add_temp_10; // sfix41_En34
  wire signed [39:0] add_cast_22; // sfix40_En34
  wire signed [39:0] add_cast_23; // sfix40_En34
  wire signed [40:0] add_temp_11; // sfix41_En34
  wire signed [39:0] section_result6; // sfix40_En35
  // Section 7 Signals 
  wire signed [39:0] a1sum7; // sfix40_En35
  wire signed [39:0] b1sum7; // sfix40_En34
  wire signed [39:0] b2sum7; // sfix40_En34
  wire signed [23:0] typeconvert7; // sfix24_En23
  reg  signed [23:0] delay_section7 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv7; // sfix40_En35
  wire signed [47:0] b1mul7; // sfix48_En44
  wire signed [47:0] b2mul7; // sfix48_En44
  wire signed [47:0] b3mul7; // sfix48_En44
  wire signed [39:0] b1multypeconvert7; // sfix40_En34
  wire signed [39:0] add_cast_24; // sfix40_En34
  wire signed [39:0] add_cast_25; // sfix40_En34
  wire signed [40:0] add_temp_12; // sfix41_En34
  wire signed [39:0] add_cast_26; // sfix40_En34
  wire signed [39:0] add_cast_27; // sfix40_En34
  wire signed [40:0] add_temp_13; // sfix41_En34
  wire signed [39:0] section_result7; // sfix40_En35
  // Section 8 Signals 
  wire signed [39:0] a1sum8; // sfix40_En35
  wire signed [39:0] b1sum8; // sfix40_En34
  wire signed [39:0] b2sum8; // sfix40_En34
  wire signed [23:0] typeconvert8; // sfix24_En23
  reg  signed [23:0] delay_section8 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv8; // sfix40_En35
  wire signed [47:0] b1mul8; // sfix48_En44
  wire signed [47:0] b2mul8; // sfix48_En44
  wire signed [47:0] b3mul8; // sfix48_En44
  wire signed [39:0] b1multypeconvert8; // sfix40_En34
  wire signed [39:0] add_cast_28; // sfix40_En34
  wire signed [39:0] add_cast_29; // sfix40_En34
  wire signed [40:0] add_temp_14; // sfix41_En34
  wire signed [39:0] add_cast_30; // sfix40_En34
  wire signed [39:0] add_cast_31; // sfix40_En34
  wire signed [40:0] add_temp_15; // sfix41_En34
  wire signed [39:0] section_result8; // sfix40_En35
  // Section 9 Signals 
  wire signed [39:0] a1sum9; // sfix40_En35
  wire signed [39:0] b1sum9; // sfix40_En34
  wire signed [39:0] b2sum9; // sfix40_En34
  wire signed [23:0] typeconvert9; // sfix24_En23
  reg  signed [23:0] delay_section9 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv9; // sfix40_En35
  wire signed [47:0] b1mul9; // sfix48_En44
  wire signed [47:0] b2mul9; // sfix48_En44
  wire signed [47:0] b3mul9; // sfix48_En44
  wire signed [39:0] b1multypeconvert9; // sfix40_En34
  wire signed [39:0] add_cast_32; // sfix40_En34
  wire signed [39:0] add_cast_33; // sfix40_En34
  wire signed [40:0] add_temp_16; // sfix41_En34
  wire signed [39:0] add_cast_34; // sfix40_En34
  wire signed [39:0] add_cast_35; // sfix40_En34
  wire signed [40:0] add_temp_17; // sfix41_En34
  wire signed [39:0] section_result9; // sfix40_En35
  // Section 10 Signals 
  wire signed [39:0] a1sum10; // sfix40_En35
  wire signed [39:0] b1sum10; // sfix40_En34
  wire signed [39:0] b2sum10; // sfix40_En34
  wire signed [23:0] typeconvert10; // sfix24_En23
  reg  signed [23:0] delay_section10 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv10; // sfix40_En35
  wire signed [47:0] b1mul10; // sfix48_En44
  wire signed [47:0] b2mul10; // sfix48_En44
  wire signed [47:0] b3mul10; // sfix48_En44
  wire signed [39:0] b1multypeconvert10; // sfix40_En34
  wire signed [39:0] add_cast_36; // sfix40_En34
  wire signed [39:0] add_cast_37; // sfix40_En34
  wire signed [40:0] add_temp_18; // sfix41_En34
  wire signed [39:0] add_cast_38; // sfix40_En34
  wire signed [39:0] add_cast_39; // sfix40_En34
  wire signed [40:0] add_temp_19; // sfix41_En34
  wire signed [39:0] section_result10; // sfix40_En35
  // Section 11 Signals 
  wire signed [39:0] a1sum11; // sfix40_En35
  wire signed [39:0] b1sum11; // sfix40_En34
  wire signed [39:0] b2sum11; // sfix40_En34
  wire signed [23:0] typeconvert11; // sfix24_En23
  reg  signed [23:0] delay_section11 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv11; // sfix40_En35
  wire signed [47:0] b1mul11; // sfix48_En44
  wire signed [47:0] b2mul11; // sfix48_En44
  wire signed [47:0] b3mul11; // sfix48_En44
  wire signed [39:0] b1multypeconvert11; // sfix40_En34
  wire signed [39:0] add_cast_40; // sfix40_En34
  wire signed [39:0] add_cast_41; // sfix40_En34
  wire signed [40:0] add_temp_20; // sfix41_En34
  wire signed [39:0] add_cast_42; // sfix40_En34
  wire signed [39:0] add_cast_43; // sfix40_En34
  wire signed [40:0] add_temp_21; // sfix41_En34
  wire signed [39:0] section_result11; // sfix40_En35
  // Section 12 Signals 
  wire signed [39:0] a1sum12; // sfix40_En35
  wire signed [39:0] b1sum12; // sfix40_En34
  wire signed [39:0] b2sum12; // sfix40_En34
  wire signed [23:0] typeconvert12; // sfix24_En23
  reg  signed [23:0] delay_section12 [0:1] ; // sfix24_En23
  wire signed [39:0] inputconv12; // sfix40_En35
  wire signed [47:0] b1mul12; // sfix48_En44
  wire signed [47:0] b2mul12; // sfix48_En44
  wire signed [47:0] b3mul12; // sfix48_En44
  wire signed [39:0] b1multypeconvert12; // sfix40_En34
  wire signed [39:0] add_cast_44; // sfix40_En34
  wire signed [39:0] add_cast_45; // sfix40_En34
  wire signed [40:0] add_temp_22; // sfix41_En34
  wire signed [39:0] add_cast_46; // sfix40_En34
  wire signed [39:0] add_cast_47; // sfix40_En34
  wire signed [40:0] add_temp_23; // sfix41_En34
  wire signed [23:0] output_typeconvert; // sfix24_En18
  reg  signed [23:0] output_register; // sfix24_En18

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  assign mul_temp = input_register * scaleconst1;
  assign scale1 = $signed({{5{mul_temp[47]}}, mul_temp});

  assign scaletypeconvert1 = (scale1[52:0] + {scale1[29], {28{~scale1[29]}}})>>>29;

  //   ------------------ Section 1 ------------------

  assign typeconvert1 = (a1sum1[35:0] + {a1sum1[12], {11{~a1sum1[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 24'b000000000000000000000000;
        delay_section1[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= typeconvert1;
        end
      end
    end // delay_process_section1

  assign inputconv1 = $signed({scaletypeconvert1[23:0], 7'b0000000});

  assign a2mul1 = delay_section1[0] * coeff_a2_section1;

  assign a3mul1 = delay_section1[1] * coeff_a3_section1;

  assign b1mul1 = $signed({typeconvert1[23:0], 21'b000000000000000000000});

  assign b2mul1 = delay_section1[0] * coeff_b2_section1;

  assign b3mul1 = delay_section1[1] * coeff_b3_section1;

  assign sub_cast = inputconv1;
  assign sub_cast_1 = ({{2{a2mul1[47]}}, a2mul1[47:0]} + {a2mul1[10], {9{~a2mul1[10]}}})>>>10;
  assign sub_temp = sub_cast - sub_cast_1;
  assign a2sum1 = sub_temp[39:0];

  assign sub_cast_2 = a2sum1;
  assign sub_cast_3 = ({{2{a3mul1[47]}}, a3mul1[47:0]} + {a3mul1[10], {9{~a3mul1[10]}}})>>>10;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign a1sum1 = sub_temp_1[39:0];

  assign b1multypeconvert1 = ({{2{b1mul1[47]}}, b1mul1[47:0]} + {b1mul1[10], {9{~b1mul1[10]}}})>>>10;

  assign add_cast = b1multypeconvert1;
  assign add_cast_1 = ({{2{b2mul1[47]}}, b2mul1[47:0]} + {b2mul1[10], {9{~b2mul1[10]}}})>>>10;
  assign add_temp = add_cast + add_cast_1;
  assign b2sum1 = add_temp[39:0];

  assign add_cast_2 = b2sum1;
  assign add_cast_3 = ({{2{b3mul1[47]}}, b3mul1[47:0]} + {b3mul1[10], {9{~b3mul1[10]}}})>>>10;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign b1sum1 = add_temp_1[39:0];

  assign section_result1 = $signed({b1sum1[38:0], 1'b0});

  //   ------------------ Section 2 ------------------

  assign typeconvert2 = (a1sum2[35:0] + {a1sum2[12], {11{~a1sum2[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 24'b000000000000000000000000;
        delay_section2[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= typeconvert2;
        end
      end
    end // delay_process_section2

  assign inputconv2 = section_result1;

  assign a2mul2 = delay_section2[0] * coeff_a2_section2;

  assign a3mul2 = delay_section2[1] * coeff_a3_section2;

  assign b1mul2 = $signed({typeconvert2[23:0], 21'b000000000000000000000});

  assign b2mul2 = delay_section2[0] * coeff_b2_section2;

  assign b3mul2 = delay_section2[1] * coeff_b3_section2;

  assign sub_cast_4 = inputconv2;
  assign sub_cast_5 = ({{2{a2mul2[47]}}, a2mul2[47:0]} + {a2mul2[10], {9{~a2mul2[10]}}})>>>10;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign a2sum2 = sub_temp_2[39:0];

  assign sub_cast_6 = a2sum2;
  assign sub_cast_7 = ({{2{a3mul2[47]}}, a3mul2[47:0]} + {a3mul2[10], {9{~a3mul2[10]}}})>>>10;
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign a1sum2 = sub_temp_3[39:0];

  assign b1multypeconvert2 = ({{2{b1mul2[47]}}, b1mul2[47:0]} + {b1mul2[10], {9{~b1mul2[10]}}})>>>10;

  assign add_cast_4 = b1multypeconvert2;
  assign add_cast_5 = ({{2{b2mul2[47]}}, b2mul2[47:0]} + {b2mul2[10], {9{~b2mul2[10]}}})>>>10;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign b2sum2 = add_temp_2[39:0];

  assign add_cast_6 = b2sum2;
  assign add_cast_7 = ({{2{b3mul2[47]}}, b3mul2[47:0]} + {b3mul2[10], {9{~b3mul2[10]}}})>>>10;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign b1sum2 = add_temp_3[39:0];

  assign section_result2 = $signed({b1sum2[38:0], 1'b0});

  //   ------------------ Section 3 ------------------

  assign typeconvert3 = (a1sum3[35:0] + {a1sum3[12], {11{~a1sum3[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section3
      if (reset == 1'b1) begin
        delay_section3[0] <= 24'b000000000000000000000000;
        delay_section3[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section3[1] <= delay_section3[0];
          delay_section3[0] <= typeconvert3;
        end
      end
    end // delay_process_section3

  assign inputconv3 = section_result2;

  assign a2mul3 = delay_section3[0] * coeff_a2_section3;

  assign a3mul3 = delay_section3[1] * coeff_a3_section3;

  assign b1mul3 = $signed({typeconvert3[23:0], 21'b000000000000000000000});

  assign b2mul3 = delay_section3[0] * coeff_b2_section3;

  assign b3mul3 = delay_section3[1] * coeff_b3_section3;

  assign sub_cast_8 = inputconv3;
  assign sub_cast_9 = ({{2{a2mul3[47]}}, a2mul3[47:0]} + {a2mul3[10], {9{~a2mul3[10]}}})>>>10;
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign a2sum3 = sub_temp_4[39:0];

  assign sub_cast_10 = a2sum3;
  assign sub_cast_11 = ({{2{a3mul3[47]}}, a3mul3[47:0]} + {a3mul3[10], {9{~a3mul3[10]}}})>>>10;
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign a1sum3 = sub_temp_5[39:0];

  assign b1multypeconvert3 = ({{2{b1mul3[47]}}, b1mul3[47:0]} + {b1mul3[10], {9{~b1mul3[10]}}})>>>10;

  assign add_cast_8 = b1multypeconvert3;
  assign add_cast_9 = ({{2{b2mul3[47]}}, b2mul3[47:0]} + {b2mul3[10], {9{~b2mul3[10]}}})>>>10;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign b2sum3 = add_temp_4[39:0];

  assign add_cast_10 = b2sum3;
  assign add_cast_11 = ({{2{b3mul3[47]}}, b3mul3[47:0]} + {b3mul3[10], {9{~b3mul3[10]}}})>>>10;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign b1sum3 = add_temp_5[39:0];

  assign section_result3 = $signed({b1sum3[38:0], 1'b0});

  //   ------------------ Section 4 ------------------

  assign typeconvert4 = (a1sum4[35:0] + {a1sum4[12], {11{~a1sum4[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section4
      if (reset == 1'b1) begin
        delay_section4[0] <= 24'b000000000000000000000000;
        delay_section4[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section4[1] <= delay_section4[0];
          delay_section4[0] <= typeconvert4;
        end
      end
    end // delay_process_section4

  assign inputconv4 = section_result3;

  assign a2mul4 = delay_section4[0] * coeff_a2_section4;

  assign a3mul4 = delay_section4[1] * coeff_a3_section4;

  assign b1mul4 = $signed({typeconvert4[23:0], 21'b000000000000000000000});

  assign b2mul4 = delay_section4[0] * coeff_b2_section4;

  assign b3mul4 = delay_section4[1] * coeff_b3_section4;

  assign sub_cast_12 = inputconv4;
  assign sub_cast_13 = ({{2{a2mul4[47]}}, a2mul4[47:0]} + {a2mul4[10], {9{~a2mul4[10]}}})>>>10;
  assign sub_temp_6 = sub_cast_12 - sub_cast_13;
  assign a2sum4 = sub_temp_6[39:0];

  assign sub_cast_14 = a2sum4;
  assign sub_cast_15 = ({{2{a3mul4[47]}}, a3mul4[47:0]} + {a3mul4[10], {9{~a3mul4[10]}}})>>>10;
  assign sub_temp_7 = sub_cast_14 - sub_cast_15;
  assign a1sum4 = sub_temp_7[39:0];

  assign b1multypeconvert4 = ({{2{b1mul4[47]}}, b1mul4[47:0]} + {b1mul4[10], {9{~b1mul4[10]}}})>>>10;

  assign add_cast_12 = b1multypeconvert4;
  assign add_cast_13 = ({{2{b2mul4[47]}}, b2mul4[47:0]} + {b2mul4[10], {9{~b2mul4[10]}}})>>>10;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign b2sum4 = add_temp_6[39:0];

  assign add_cast_14 = b2sum4;
  assign add_cast_15 = ({{2{b3mul4[47]}}, b3mul4[47:0]} + {b3mul4[10], {9{~b3mul4[10]}}})>>>10;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign b1sum4 = add_temp_7[39:0];

  assign section_result4 = $signed({b1sum4[38:0], 1'b0});

  //   ------------------ Section 5 ------------------

  assign typeconvert5 = (a1sum5[35:0] + {a1sum5[12], {11{~a1sum5[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section5
      if (reset == 1'b1) begin
        delay_section5[0] <= 24'b000000000000000000000000;
        delay_section5[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section5[1] <= delay_section5[0];
          delay_section5[0] <= typeconvert5;
        end
      end
    end // delay_process_section5

  assign inputconv5 = section_result4;

  assign a2mul5 = delay_section5[0] * coeff_a2_section5;

  assign a3mul5 = delay_section5[1] * coeff_a3_section5;

  assign b1mul5 = $signed({typeconvert5[23:0], 21'b000000000000000000000});

  assign b2mul5 = delay_section5[0] * coeff_b2_section5;

  assign b3mul5 = delay_section5[1] * coeff_b3_section5;

  assign sub_cast_16 = inputconv5;
  assign sub_cast_17 = ({{2{a2mul5[47]}}, a2mul5[47:0]} + {a2mul5[10], {9{~a2mul5[10]}}})>>>10;
  assign sub_temp_8 = sub_cast_16 - sub_cast_17;
  assign a2sum5 = sub_temp_8[39:0];

  assign sub_cast_18 = a2sum5;
  assign sub_cast_19 = ({{2{a3mul5[47]}}, a3mul5[47:0]} + {a3mul5[10], {9{~a3mul5[10]}}})>>>10;
  assign sub_temp_9 = sub_cast_18 - sub_cast_19;
  assign a1sum5 = sub_temp_9[39:0];

  assign b1multypeconvert5 = ({{2{b1mul5[47]}}, b1mul5[47:0]} + {b1mul5[10], {9{~b1mul5[10]}}})>>>10;

  assign add_cast_16 = b1multypeconvert5;
  assign add_cast_17 = ({{2{b2mul5[47]}}, b2mul5[47:0]} + {b2mul5[10], {9{~b2mul5[10]}}})>>>10;
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign b2sum5 = add_temp_8[39:0];

  assign add_cast_18 = b2sum5;
  assign add_cast_19 = ({{2{b3mul5[47]}}, b3mul5[47:0]} + {b3mul5[10], {9{~b3mul5[10]}}})>>>10;
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign b1sum5 = add_temp_9[39:0];

  assign section_result5 = $signed({b1sum5[38:0], 1'b0});

  //   ------------------ Section 6 ------------------

  assign typeconvert6 = (a1sum6[35:0] + {a1sum6[12], {11{~a1sum6[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section6
      if (reset == 1'b1) begin
        delay_section6[0] <= 24'b000000000000000000000000;
        delay_section6[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section6[1] <= delay_section6[0];
          delay_section6[0] <= typeconvert6;
        end
      end
    end // delay_process_section6

  assign inputconv6 = section_result5;

  assign a2mul6 = delay_section6[0] * coeff_a2_section6;

  assign a3mul6 = delay_section6[1] * coeff_a3_section6;

  assign b1mul6 = $signed({typeconvert6[23:0], 21'b000000000000000000000});

  assign b2mul6 = delay_section6[0] * coeff_b2_section6;

  assign b3mul6 = delay_section6[1] * coeff_b3_section6;

  assign sub_cast_20 = inputconv6;
  assign sub_cast_21 = ({{2{a2mul6[47]}}, a2mul6[47:0]} + {a2mul6[10], {9{~a2mul6[10]}}})>>>10;
  assign sub_temp_10 = sub_cast_20 - sub_cast_21;
  assign a2sum6 = sub_temp_10[39:0];

  assign sub_cast_22 = a2sum6;
  assign sub_cast_23 = ({{2{a3mul6[47]}}, a3mul6[47:0]} + {a3mul6[10], {9{~a3mul6[10]}}})>>>10;
  assign sub_temp_11 = sub_cast_22 - sub_cast_23;
  assign a1sum6 = sub_temp_11[39:0];

  assign b1multypeconvert6 = ({{2{b1mul6[47]}}, b1mul6[47:0]} + {b1mul6[10], {9{~b1mul6[10]}}})>>>10;

  assign add_cast_20 = b1multypeconvert6;
  assign add_cast_21 = ({{2{b2mul6[47]}}, b2mul6[47:0]} + {b2mul6[10], {9{~b2mul6[10]}}})>>>10;
  assign add_temp_10 = add_cast_20 + add_cast_21;
  assign b2sum6 = add_temp_10[39:0];

  assign add_cast_22 = b2sum6;
  assign add_cast_23 = ({{2{b3mul6[47]}}, b3mul6[47:0]} + {b3mul6[10], {9{~b3mul6[10]}}})>>>10;
  assign add_temp_11 = add_cast_22 + add_cast_23;
  assign b1sum6 = add_temp_11[39:0];

  assign section_result6 = $signed({b1sum6[38:0], 1'b0});

  //   ------------------ Section 7 ------------------

  assign typeconvert7 = (a1sum7[35:0] + {a1sum7[12], {11{~a1sum7[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section7
      if (reset == 1'b1) begin
        delay_section7[0] <= 24'b000000000000000000000000;
        delay_section7[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section7[1] <= delay_section7[0];
          delay_section7[0] <= typeconvert7;
        end
      end
    end // delay_process_section7

  assign inputconv7 = section_result6;

  assign b1mul7 = $signed({typeconvert7[23:0], 21'b000000000000000000000});

  assign b2mul7 = delay_section7[0] * coeff_b2_section7;

  assign b3mul7 = delay_section7[1] * coeff_b3_section7;

  assign a1sum7 = inputconv7;

  assign b1multypeconvert7 = ({{2{b1mul7[47]}}, b1mul7[47:0]} + {b1mul7[10], {9{~b1mul7[10]}}})>>>10;

  assign add_cast_24 = b1multypeconvert7;
  assign add_cast_25 = ({{2{b2mul7[47]}}, b2mul7[47:0]} + {b2mul7[10], {9{~b2mul7[10]}}})>>>10;
  assign add_temp_12 = add_cast_24 + add_cast_25;
  assign b2sum7 = add_temp_12[39:0];

  assign add_cast_26 = b2sum7;
  assign add_cast_27 = ({{2{b3mul7[47]}}, b3mul7[47:0]} + {b3mul7[10], {9{~b3mul7[10]}}})>>>10;
  assign add_temp_13 = add_cast_26 + add_cast_27;
  assign b1sum7 = add_temp_13[39:0];

  assign section_result7 = $signed({b1sum7[38:0], 1'b0});

  //   ------------------ Section 8 ------------------

  assign typeconvert8 = (a1sum8[35:0] + {a1sum8[12], {11{~a1sum8[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section8
      if (reset == 1'b1) begin
        delay_section8[0] <= 24'b000000000000000000000000;
        delay_section8[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section8[1] <= delay_section8[0];
          delay_section8[0] <= typeconvert8;
        end
      end
    end // delay_process_section8

  assign inputconv8 = section_result7;

  assign b1mul8 = $signed({typeconvert8[23:0], 21'b000000000000000000000});

  assign b2mul8 = delay_section8[0] * coeff_b2_section8;

  assign b3mul8 = delay_section8[1] * coeff_b3_section8;

  assign a1sum8 = inputconv8;

  assign b1multypeconvert8 = ({{2{b1mul8[47]}}, b1mul8[47:0]} + {b1mul8[10], {9{~b1mul8[10]}}})>>>10;

  assign add_cast_28 = b1multypeconvert8;
  assign add_cast_29 = ({{2{b2mul8[47]}}, b2mul8[47:0]} + {b2mul8[10], {9{~b2mul8[10]}}})>>>10;
  assign add_temp_14 = add_cast_28 + add_cast_29;
  assign b2sum8 = add_temp_14[39:0];

  assign add_cast_30 = b2sum8;
  assign add_cast_31 = ({{2{b3mul8[47]}}, b3mul8[47:0]} + {b3mul8[10], {9{~b3mul8[10]}}})>>>10;
  assign add_temp_15 = add_cast_30 + add_cast_31;
  assign b1sum8 = add_temp_15[39:0];

  assign section_result8 = $signed({b1sum8[38:0], 1'b0});

  //   ------------------ Section 9 ------------------

  assign typeconvert9 = (a1sum9[35:0] + {a1sum9[12], {11{~a1sum9[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section9
      if (reset == 1'b1) begin
        delay_section9[0] <= 24'b000000000000000000000000;
        delay_section9[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section9[1] <= delay_section9[0];
          delay_section9[0] <= typeconvert9;
        end
      end
    end // delay_process_section9

  assign inputconv9 = section_result8;

  assign b1mul9 = $signed({typeconvert9[23:0], 21'b000000000000000000000});

  assign b2mul9 = delay_section9[0] * coeff_b2_section9;

  assign b3mul9 = delay_section9[1] * coeff_b3_section9;

  assign a1sum9 = inputconv9;

  assign b1multypeconvert9 = ({{2{b1mul9[47]}}, b1mul9[47:0]} + {b1mul9[10], {9{~b1mul9[10]}}})>>>10;

  assign add_cast_32 = b1multypeconvert9;
  assign add_cast_33 = ({{2{b2mul9[47]}}, b2mul9[47:0]} + {b2mul9[10], {9{~b2mul9[10]}}})>>>10;
  assign add_temp_16 = add_cast_32 + add_cast_33;
  assign b2sum9 = add_temp_16[39:0];

  assign add_cast_34 = b2sum9;
  assign add_cast_35 = ({{2{b3mul9[47]}}, b3mul9[47:0]} + {b3mul9[10], {9{~b3mul9[10]}}})>>>10;
  assign add_temp_17 = add_cast_34 + add_cast_35;
  assign b1sum9 = add_temp_17[39:0];

  assign section_result9 = $signed({b1sum9[38:0], 1'b0});

  //   ------------------ Section 10 ------------------

  assign typeconvert10 = (a1sum10[35:0] + {a1sum10[12], {11{~a1sum10[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section10
      if (reset == 1'b1) begin
        delay_section10[0] <= 24'b000000000000000000000000;
        delay_section10[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section10[1] <= delay_section10[0];
          delay_section10[0] <= typeconvert10;
        end
      end
    end // delay_process_section10

  assign inputconv10 = section_result9;

  assign b1mul10 = $signed({typeconvert10[23:0], 21'b000000000000000000000});

  assign b2mul10 = delay_section10[0] * coeff_b2_section10;

  assign b3mul10 = delay_section10[1] * coeff_b3_section10;

  assign a1sum10 = inputconv10;

  assign b1multypeconvert10 = ({{2{b1mul10[47]}}, b1mul10[47:0]} + {b1mul10[10], {9{~b1mul10[10]}}})>>>10;

  assign add_cast_36 = b1multypeconvert10;
  assign add_cast_37 = ({{2{b2mul10[47]}}, b2mul10[47:0]} + {b2mul10[10], {9{~b2mul10[10]}}})>>>10;
  assign add_temp_18 = add_cast_36 + add_cast_37;
  assign b2sum10 = add_temp_18[39:0];

  assign add_cast_38 = b2sum10;
  assign add_cast_39 = ({{2{b3mul10[47]}}, b3mul10[47:0]} + {b3mul10[10], {9{~b3mul10[10]}}})>>>10;
  assign add_temp_19 = add_cast_38 + add_cast_39;
  assign b1sum10 = add_temp_19[39:0];

  assign section_result10 = $signed({b1sum10[38:0], 1'b0});

  //   ------------------ Section 11 ------------------

  assign typeconvert11 = (a1sum11[35:0] + {a1sum11[12], {11{~a1sum11[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section11
      if (reset == 1'b1) begin
        delay_section11[0] <= 24'b000000000000000000000000;
        delay_section11[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section11[1] <= delay_section11[0];
          delay_section11[0] <= typeconvert11;
        end
      end
    end // delay_process_section11

  assign inputconv11 = section_result10;

  assign b1mul11 = $signed({typeconvert11[23:0], 21'b000000000000000000000});

  assign b2mul11 = delay_section11[0] * coeff_b2_section11;

  assign b3mul11 = delay_section11[1] * coeff_b3_section11;

  assign a1sum11 = inputconv11;

  assign b1multypeconvert11 = ({{2{b1mul11[47]}}, b1mul11[47:0]} + {b1mul11[10], {9{~b1mul11[10]}}})>>>10;

  assign add_cast_40 = b1multypeconvert11;
  assign add_cast_41 = ({{2{b2mul11[47]}}, b2mul11[47:0]} + {b2mul11[10], {9{~b2mul11[10]}}})>>>10;
  assign add_temp_20 = add_cast_40 + add_cast_41;
  assign b2sum11 = add_temp_20[39:0];

  assign add_cast_42 = b2sum11;
  assign add_cast_43 = ({{2{b3mul11[47]}}, b3mul11[47:0]} + {b3mul11[10], {9{~b3mul11[10]}}})>>>10;
  assign add_temp_21 = add_cast_42 + add_cast_43;
  assign b1sum11 = add_temp_21[39:0];

  assign section_result11 = $signed({b1sum11[38:0], 1'b0});

  //   ------------------ Section 12 ------------------

  assign typeconvert12 = (a1sum12[35:0] + {a1sum12[12], {11{~a1sum12[12]}}})>>>12;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section12
      if (reset == 1'b1) begin
        delay_section12[0] <= 24'b000000000000000000000000;
        delay_section12[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section12[1] <= delay_section12[0];
          delay_section12[0] <= typeconvert12;
        end
      end
    end // delay_process_section12

  assign inputconv12 = section_result11;

  assign b1mul12 = $signed({typeconvert12[23:0], 21'b000000000000000000000});

  assign b2mul12 = delay_section12[0] * coeff_b2_section12;

  assign b3mul12 = delay_section12[1] * coeff_b3_section12;

  assign a1sum12 = inputconv12;

  assign b1multypeconvert12 = ({{2{b1mul12[47]}}, b1mul12[47:0]} + {b1mul12[10], {9{~b1mul12[10]}}})>>>10;

  assign add_cast_44 = b1multypeconvert12;
  assign add_cast_45 = ({{2{b2mul12[47]}}, b2mul12[47:0]} + {b2mul12[10], {9{~b2mul12[10]}}})>>>10;
  assign add_temp_22 = add_cast_44 + add_cast_45;
  assign b2sum12 = add_temp_22[39:0];

  assign add_cast_46 = b2sum12;
  assign add_cast_47 = ({{2{b3mul12[47]}}, b3mul12[47:0]} + {b3mul12[10], {9{~b3mul12[10]}}})>>>10;
  assign add_temp_23 = add_cast_46 + add_cast_47;
  assign b1sum12 = add_temp_23[39:0];

  assign output_typeconvert = (b1sum12[39:0] + {b1sum12[16], {15{~b1sum12[16]}}})>>>16;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // bandpass_leastPth_ver
