-- -------------------------------------------------------------
--
-- Module: FilterProgrammable_tb_pkg
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2022-04-22 00:03:00
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Seth\AppData\Local\Temp\tp16d74763_2c45_4386_b5da_7c28c301d87d
-- Name: FilterProgrammable
-- CoefficientSource: ProcessorInterface
-- InputDataType: numerictype(1,24,23)
-- TestBenchName: FilterProgrammable_tb
-- TestBenchUserStimulus:  User data, length 200
-- TestBenchCoeffStimulus: [0.0024229  -0.0020832  -0.0067703    0.016732   -0.011117  -0.0062311   0.0084016   0.0092568   -0.012983   -0.010121    0.018274    0.011432   -0.026176   -0.012489    0.037997    0.013389   -0.058155   -0.014048     0.10272    0.014462    -0.31717     0.48539]
--
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 43
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s24,23 -> [-1 1)
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;


PACKAGE FilterProgrammable_tb_pkg IS

  -- Type Definitions
  TYPE filter_in_data_log_type IS ARRAY (0 TO 422) OF std_logic_vector(23 DOWNTO 0);
  TYPE write_enable_data_log_type IS ARRAY (0 TO 422) OF std_logic;
  TYPE write_address_data_log_type IS ARRAY (0 TO 422) OF std_logic_vector(4 DOWNTO 0);
  TYPE filter_out_type IS ARRAY (0 TO 422) OF std_logic_vector(53 DOWNTO 0);

  -- Functions
  FUNCTION to_integer( x : IN std_logic) RETURN integer;
  FUNCTION to_hex( x : IN std_logic) RETURN string;
  FUNCTION to_hex( x : IN std_logic_vector) RETURN string;
  FUNCTION to_hex( x : IN signed ) RETURN string;
  FUNCTION to_hex( x : IN unsigned ) RETURN string;
  FUNCTION to_hex( x : IN real ) RETURN string;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN std_logic_vector;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN signed;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN unsigned;

  -- Procedures
  PROCEDURE filter_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE write_enable_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE write_done_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE write_address_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE coeffs_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE filter_out_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

END FilterProgrammable_tb_pkg;

PACKAGE BODY FilterProgrammable_tb_pkg IS
  FUNCTION to_integer( x : IN std_logic) RETURN integer IS
    VARIABLE int: integer;
  BEGIN
    IF x = '0' THEN
      int := 0;
    ELSE
      int := 1;
    END IF;
    RETURN int;
  END;

  FUNCTION to_hex( x : IN std_logic_vector) RETURN string IS
    VARIABLE result  : STRING(1 TO 256); -- 1024 bits max
    VARIABLE i       : INTEGER;
    VARIABLE imod    : INTEGER;
    VARIABLE j       : INTEGER;
    VARIABLE jinc    : INTEGER;
    VARIABLE newx    : std_logic_vector(1023 DOWNTO 0);
  BEGIN
    newx := (OTHERS => '0');
    IF x'LEFT > x'RIGHT THEN
      j := x'LENGTH-1;
      jinc := -1;
    ELSE
      j := 0;
      jinc := 1;
    END IF;
    FOR i IN x'RANGE LOOP
      newx(j) := x(i);
      j := j+jinc;
    END LOOP;  -- i
    i := x'LENGTH-1;
    imod := x'LENGTH MOD 4;
    IF    imod = 1 THEN i := i+3;
    ELSIF imod = 2 THEN i := i+2;
    ELSIF imod = 3 THEN i := i+1;
    END IF;
    j := 1;
    WHILE i >= 3 LOOP
      IF    newx(i DOWNTO (i-3)) = "0000" THEN result(j) := '0';
      ELSIF newx(i DOWNTO (i-3)) = "0001" THEN result(j) := '1';
      ELSIF newx(i DOWNTO (i-3)) = "0010" THEN result(j) := '2';
      ELSIF newx(i DOWNTO (i-3)) = "0011" THEN result(j) := '3';
      ELSIF newx(i DOWNTO (i-3)) = "0100" THEN result(j) := '4';
      ELSIF newx(i DOWNTO (i-3)) = "0101" THEN result(j) := '5';
      ELSIF newx(i DOWNTO (i-3)) = "0110" THEN result(j) := '6';
      ELSIF newx(i DOWNTO (i-3)) = "0111" THEN result(j) := '7';
      ELSIF newx(i DOWNTO (i-3)) = "1000" THEN result(j) := '8';
      ELSIF newx(i DOWNTO (i-3)) = "1001" THEN result(j) := '9';
      ELSIF newx(i DOWNTO (i-3)) = "1010" THEN result(j) := 'A';
      ELSIF newx(i DOWNTO (i-3)) = "1011" THEN result(j) := 'B';
      ELSIF newx(i DOWNTO (i-3)) = "1100" THEN result(j) := 'C';
      ELSIF newx(i DOWNTO (i-3)) = "1101" THEN result(j) := 'D';
      ELSIF newx(i DOWNTO (i-3)) = "1110" THEN result(j) := 'E';
      ELSIF newx(i DOWNTO (i-3)) = "1111" THEN result(j) := 'F';
      ELSE result(j) := 'X';
      END IF;
      i := i-4;
      j := j+1;
    END LOOP;
    RETURN result(1 TO j-1);
  END;


  FUNCTION to_hex( x : IN std_logic ) RETURN string IS
  BEGIN
    RETURN std_logic'image(x);
  END;


  FUNCTION to_hex( x : IN signed ) RETURN string IS
  BEGIN
    RETURN to_hex( std_logic_vector(x) );
  END;


  FUNCTION to_hex( x : IN unsigned ) RETURN string IS
  BEGIN
    RETURN to_hex( std_logic_vector(x) );
  END;


  FUNCTION to_hex( x : IN real ) RETURN string IS
  BEGIN
    RETURN real'image(x);
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN std_logic_vector IS
    variable result : std_logic_vector(slice - 1 DOWNTO 0);
  BEGIN
    result := to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0);
    RETURN result;
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN signed IS
    variable result : signed(slice -  1 DOWNTO 0);
  BEGIN
    result := signed(to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0));
    RETURN result;
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN unsigned IS
    variable result : unsigned(slice -  1 DOWNTO 0);
  BEGIN
    result := unsigned(to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0));
    RETURN result;
  END;


  PROCEDURE filter_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END filter_in_data_log_procedure;

  PROCEDURE write_enable_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END write_enable_data_log_procedure;

  PROCEDURE write_done_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END write_done_data_log_procedure;

  PROCEDURE write_address_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END write_address_data_log_procedure;

  PROCEDURE coeffs_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END coeffs_in_data_log_procedure;

  PROCEDURE filter_out_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(422, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(422, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END filter_out_procedure;

END FilterProgrammable_tb_pkg;

-- -------------------------------------------------------------
--
-- Module: FilterProgrammable_tb_data
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2022-04-22 00:03:00
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;
USE work.FilterProgrammable_tb_pkg.ALL;

PACKAGE FilterProgrammable_tb_data IS

  CONSTANT filter_in_data_log_force : filter_in_data_log_type;
  CONSTANT write_enable_data_log_force : write_enable_data_log_type;
  CONSTANT write_done_data_log_force : write_enable_data_log_type;
  CONSTANT write_address_data_log_force : write_address_data_log_type;
  CONSTANT coeffs_in_data_log_force : filter_in_data_log_type;
  CONSTANT filter_out_expected : filter_out_type;

END FilterProgrammable_tb_data;

PACKAGE BODY FilterProgrammable_tb_data IS

  CONSTANT filter_in_data_log_force : filter_in_data_log_type :=
    (
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"7fffff",
         X"7fff59",
         X"7ff58c",
         X"7fcb18",
         X"7f58e4",
         X"7e6884",
         X"7cb4ec",
         X"79ebd4",
         X"75b02e",
         X"6f9e23",
         X"6750ed",
         X"5c6afe",
         X"4ea0ac",
         X"3dc54c",
         X"29da66",
         X"131fff",
         X"fa2457",
         X"dfd0c6",
         X"c57086",
         X"acadc2",
         X"978100",
         X"880f91",
         X"8076ff",
         X"828622",
         X"8f6839",
         X"a74b3e",
         X"c90fd4",
         X"f215a6",
         X"1e3989",
         X"4818d6",
         X"69a669",
         X"7d0fa5",
         X"7ddc15",
         X"6a1ab0",
         X"435a5e",
         X"0f1ebb",
         X"d6876d",
         X"a4fdda",
         X"85f4d3",
         X"82113d",
         X"9c608b",
         X"d0778d",
         X"12534d",
         X"5086df",
         X"78a146",
         X"7ce2ec",
         X"59937f",
         X"17e7c9",
         X"ccbd26",
         X"92a00c",
         X"806608",
         X"9f7e34",
         X"e61ccc",
         X"38c1a2",
         X"740a64",
         X"7bf037",
         X"4a166c",
         X"f3b150",
         X"a2320f",
         X"800178",
         X"a1a5c0",
         X"f7b888",
         X"53a0ad",
         X"7fb0fb",
         X"5f2ae8",
         X"0307e3",
         X"a3dcb5",
         X"80565d",
         X"b2fa05",
         X"1bdcf9",
         X"71e931",
         X"750b0c",
         X"1fcb0c",
         X"b10dca",
         X"800801",
         X"b6e788",
         X"2b60a2",
         X"7bbbdf",
         X"603db5",
         X"ee131e",
         X"8b73f2",
         X"95ab94",
         X"064301",
         X"718a3c",
         X"6b7103",
         X"f6ea16",
         X"8b1efc",
         X"9bdf21",
         X"1a487e",
         X"7c234c",
         X"51274d",
         X"c79b2c",
         X"801b99",
         X"d2ba14",
         X"5d876d",
         X"73b277",
         X"f61bbc",
         X"84cc83",
         X"b63e0b",
         X"4b6660",
         X"79ac32",
         X"fe2e71",
         X"84cc83",
         X"bcfdb3",
         X"57d3fb",
         X"7002da",
         X"de40e5",
         X"801b99",
         X"ea1529",
         X"7737f0",
         X"4409fb",
         X"a11a68",
         X"9bdf21",
         X"3fe220",
         X"769ede",
         X"df08aa",
         X"816824",
         X"064301",
         X"7fe87c",
         X"0e512e",
         X"81ecd7",
         X"e3be16",
         X"7bbbdf",
         X"23b103",
         X"857a8b",
         X"db2554",
         X"7b1744",
         X"1fcb0c",
         X"82da79",
         X"ebad54",
         X"7f6d1c",
         X"023902",
         X"80565d",
         X"1650be",
         X"7aa33f",
         X"cbffcf",
         X"937941",
         X"53a0ad",
         X"51c6e7",
         X"9094a6",
         X"d74b66",
         X"7f146e",
         X"f3b150",
         X"86b594",
         X"44b8e7",
         X"573d01",
         X"8ea5ae",
         X"e61ccc",
         X"7f8008",
         X"cef848",
         X"9ef6c4",
         X"6e692d",
         X"17e7c9",
         X"81c9bb",
         X"41476d",
         X"4dfcfe",
         X"845ec6",
         X"12534d",
         X"6c4fc0",
         X"94c75c",
         X"eee017",
         X"796b52",
         X"a4fdda",
         X"da5f5c",
         X"7d8e27",
         X"ad4b43",
         X"d43e16",
         X"7ddc15",
         X"aada60",
         X"dbebad",
         X"7adde2",
         X"9e7052",
         X"f215a6",
         X"70666c",
         X"8cd3a3",
         X"171c62",
         X"56a524",
         X"8076ff",
         X"46c16c",
         X"26037c",
         X"89d71f",
         X"7246fd",
         X"dfd0c6",
         X"b994e3",
         X"7e4757",
         X"99e3be",
         X"0fec20",
         X"4ea0ac",
         X"812d8a",
         X"67ca8d",
         X"e6e793",
         X"be5fa9",
         X"79ebd4",
         X"8a2749",
         X"3a3367",
         X"1b12df",
         X"9ce2fa",
         X"7ff58c",
         X"97f909",
         X"278dde",
         X"7fffff",
         X"7fff59",
         X"7ff58c",
         X"7fcb18",
         X"7f58e4",
         X"7e6884",
         X"7cb4ec",
         X"79ebd4",
         X"75b02e",
         X"6f9e23",
         X"6750ed",
         X"5c6afe",
         X"4ea0ac",
         X"3dc54c",
         X"29da66",
         X"131fff",
         X"fa2457",
         X"dfd0c6",
         X"c57086",
         X"acadc2",
         X"978100",
         X"880f91",
         X"8076ff",
         X"828622",
         X"8f6839",
         X"a74b3e",
         X"c90fd4",
         X"f215a6",
         X"1e3989",
         X"4818d6",
         X"69a669",
         X"7d0fa5",
         X"7ddc15",
         X"6a1ab0",
         X"435a5e",
         X"0f1ebb",
         X"d6876d",
         X"a4fdda",
         X"85f4d3",
         X"82113d",
         X"9c608b",
         X"d0778d",
         X"12534d",
         X"5086df",
         X"78a146",
         X"7ce2ec",
         X"59937f",
         X"17e7c9",
         X"ccbd26",
         X"92a00c",
         X"806608",
         X"9f7e34",
         X"e61ccc",
         X"38c1a2",
         X"740a64",
         X"7bf037",
         X"4a166c",
         X"f3b150",
         X"a2320f",
         X"800178",
         X"a1a5c0",
         X"f7b888",
         X"53a0ad",
         X"7fb0fb",
         X"5f2ae8",
         X"0307e3",
         X"a3dcb5",
         X"80565d",
         X"b2fa05",
         X"1bdcf9",
         X"71e931",
         X"750b0c",
         X"1fcb0c",
         X"b10dca",
         X"800801",
         X"b6e788",
         X"2b60a2",
         X"7bbbdf",
         X"603db5",
         X"ee131e",
         X"8b73f2",
         X"95ab94",
         X"064301",
         X"718a3c",
         X"6b7103",
         X"f6ea16",
         X"8b1efc",
         X"9bdf21",
         X"1a487e",
         X"7c234c",
         X"51274d",
         X"c79b2c",
         X"801b99",
         X"d2ba14",
         X"5d876d",
         X"73b277",
         X"f61bbc",
         X"84cc83",
         X"b63e0b",
         X"4b6660",
         X"79ac32",
         X"fe2e71",
         X"84cc83",
         X"bcfdb3",
         X"57d3fb",
         X"7002da",
         X"de40e5",
         X"801b99",
         X"ea1529",
         X"7737f0",
         X"4409fb",
         X"a11a68",
         X"9bdf21",
         X"3fe220",
         X"769ede",
         X"df08aa",
         X"816824",
         X"064301",
         X"7fe87c",
         X"0e512e",
         X"81ecd7",
         X"e3be16",
         X"7bbbdf",
         X"23b103",
         X"857a8b",
         X"db2554",
         X"7b1744",
         X"1fcb0c",
         X"82da79",
         X"ebad54",
         X"7f6d1c",
         X"023902",
         X"80565d",
         X"1650be",
         X"7aa33f",
         X"cbffcf",
         X"937941",
         X"53a0ad",
         X"51c6e7",
         X"9094a6",
         X"d74b66",
         X"7f146e",
         X"f3b150",
         X"86b594",
         X"44b8e7",
         X"573d01",
         X"8ea5ae",
         X"e61ccc",
         X"7f8008",
         X"cef848",
         X"9ef6c4",
         X"6e692d",
         X"17e7c9",
         X"81c9bb",
         X"41476d",
         X"4dfcfe",
         X"845ec6",
         X"12534d",
         X"6c4fc0",
         X"94c75c",
         X"eee017",
         X"796b52",
         X"a4fdda",
         X"da5f5c",
         X"7d8e27",
         X"ad4b43",
         X"d43e16",
         X"7ddc15",
         X"aada60",
         X"dbebad",
         X"7adde2",
         X"9e7052",
         X"f215a6",
         X"70666c",
         X"8cd3a3",
         X"171c62",
         X"56a524",
         X"8076ff",
         X"46c16c",
         X"26037c",
         X"89d71f",
         X"7246fd",
         X"dfd0c6",
         X"b994e3",
         X"7e4757",
         X"99e3be",
         X"0fec20",
         X"4ea0ac",
         X"812d8a",
         X"67ca8d",
         X"e6e793",
         X"be5fa9",
         X"79ebd4",
         X"8a2749",
         X"3a3367",
         X"1b12df",
         X"9ce2fa",
         X"7ff58c",
         X"97f909",
         X"278dde");

  CONSTANT write_enable_data_log_force : write_enable_data_log_type :=
    (
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '1',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0');

  CONSTANT write_done_data_log_force : write_enable_data_log_type :=
    (
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '1',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '1',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0',
         '0');

  CONSTANT write_address_data_log_force : write_address_data_log_type :=
    (
         SLICE(X"00",5),
         SLICE(X"01",5),
         SLICE(X"02",5),
         SLICE(X"03",5),
         SLICE(X"04",5),
         SLICE(X"05",5),
         SLICE(X"06",5),
         SLICE(X"07",5),
         SLICE(X"08",5),
         SLICE(X"09",5),
         SLICE(X"0a",5),
         SLICE(X"0b",5),
         SLICE(X"0c",5),
         SLICE(X"0d",5),
         SLICE(X"0e",5),
         SLICE(X"0f",5),
         SLICE(X"10",5),
         SLICE(X"11",5),
         SLICE(X"12",5),
         SLICE(X"13",5),
         SLICE(X"14",5),
         SLICE(X"15",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"01",5),
         SLICE(X"02",5),
         SLICE(X"03",5),
         SLICE(X"04",5),
         SLICE(X"05",5),
         SLICE(X"06",5),
         SLICE(X"07",5),
         SLICE(X"08",5),
         SLICE(X"09",5),
         SLICE(X"0a",5),
         SLICE(X"0b",5),
         SLICE(X"0c",5),
         SLICE(X"0d",5),
         SLICE(X"0e",5),
         SLICE(X"0f",5),
         SLICE(X"10",5),
         SLICE(X"11",5),
         SLICE(X"12",5),
         SLICE(X"13",5),
         SLICE(X"14",5),
         SLICE(X"15",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5),
         SLICE(X"00",5));

  CONSTANT coeffs_in_data_log_force : filter_in_data_log_type :=
    (
         X"ffb09b",
         X"ffbbbc",
         X"00ddda",
         X"022446",
         X"016c49",
         X"ff33d1",
         X"feecb2",
         X"012f54",
         X"01a96c",
         X"feb459",
         X"fda937",
         X"01769a",
         X"0359bb",
         X"fe66c2",
         X"fb22ed",
         X"01b6bb",
         X"0771a3",
         X"fe33ac",
         X"f2d9eb",
         X"01d9e6",
         X"2898e9",
         X"3e212f",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"004f65",
         X"ffbbbc",
         X"ff2226",
         X"022446",
         X"fe93b7",
         X"ff33d1",
         X"01134e",
         X"012f54",
         X"fe5694",
         X"feb459",
         X"0256c9",
         X"01769a",
         X"fca645",
         X"fe66c2",
         X"04dd13",
         X"01b6bb",
         X"f88e5d",
         X"fe33ac",
         X"0d2615",
         X"01d9e6",
         X"d76717",
         X"3e212f",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000",
         X"000000");

  CONSTANT filter_out_expected : filter_out_type :=
    (
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"00000000000000",54),
         SLICE(X"3fffd84d804f65",54),
         SLICE(X"3fffb62bb40f27",54),
         SLICE(X"0000251be99646",54),
         SLICE(X"0001374e1f30dc",54),
         SLICE(X"0001ed97791ef1",54),
         SLICE(X"000187ae4682a4",54),
         SLICE(X"0000fe0326c16f",54),
         SLICE(X"00019505a9eb1e",54),
         SLICE(X"000267d6b6aa56",54),
         SLICE(X"0001be1d4528a4",54),
         SLICE(X"00008bd4e73099",54),
         SLICE(X"00013c0dd4bf41",54),
         SLICE(X"0002d861b69215",54),
         SLICE(X"0001f480176064",54),
         SLICE(X"3fff66b0a360db",54),
         SLICE(X"00001988f63eb0",54),
         SLICE(X"00039fbc34b635",54),
         SLICE(X"00027ca67e743d",54),
         SLICE(X"3ffba2cd20f80a",54),
         SLICE(X"3ffc402e59e4e0",54),
         SLICE(X"001036bcbf5870",54),
         SLICE(X"002eef329e8cd9",54),
         SLICE(X"0042e5c4b512e8",54),
         SLICE(X"004380d3210676",54),
         SLICE(X"003c9b91dc6b3d",54),
         SLICE(X"003b56a31e8bd2",54),
         SLICE(X"003e8f7c0845b5",54),
         SLICE(X"003eac46a084dd",54),
         SLICE(X"003b19c4f93952",54),
         SLICE(X"0038936baa2a84",54),
         SLICE(X"0037b8046cd601",54),
         SLICE(X"0034de108780c0",54),
         SLICE(X"002ed0dd046cea",54),
         SLICE(X"0027c2c12fcd29",54),
         SLICE(X"00207dbe00b646",54),
         SLICE(X"00173996aaf212",54),
         SLICE(X"000b27f3ff7b7a",54),
         SLICE(X"3ffdd5cbea6691",54),
         SLICE(X"3ff0bec916ee58",54),
         SLICE(X"3fe3e3d82c1a90",54),
         SLICE(X"3fd7401c480a8c",54),
         SLICE(X"3fcc09ed87755b",54),
         SLICE(X"3fc40070c12e3b",54),
         SLICE(X"3fc06fa0e8220f",54),
         SLICE(X"3fc20e5ef9de85",54),
         SLICE(X"3fc94e609e25df",54),
         SLICE(X"3fd60d32bdc076",54),
         SLICE(X"3fe779edaccfb7",54),
         SLICE(X"3ffc0ed7b268b3",54),
         SLICE(X"0011a419fc91b8",54),
         SLICE(X"00259e0be4ddd1",54),
         SLICE(X"0035368f23a062",54),
         SLICE(X"003dddbadee684",54),
         SLICE(X"003daa63e621fa",54),
         SLICE(X"0033ce444b992e",54),
         SLICE(X"0020fb11f1efe2",54),
         SLICE(X"00079e53885f5a",54),
         SLICE(X"3febd4037d0a3d",54),
         SLICE(X"3fd2f1600795e1",54),
         SLICE(X"3fc298175398e1",54),
         SLICE(X"3fbf626d00cf37",54),
         SLICE(X"3fcb68131b264a",54),
         SLICE(X"3fe50b8dfc3421",54),
         SLICE(X"0006995296cc20",54),
         SLICE(X"00272a2300f500",54),
         SLICE(X"003ce2e489e63e",54),
         SLICE(X"004021ac6a48b0",54),
         SLICE(X"002e98b71e6055",54),
         SLICE(X"000d0b533a1df3",54),
         SLICE(X"3fe697ca8e7529",54),
         SLICE(X"3fc9479bf6908a",54),
         SLICE(X"3fc0cd622bd46d",54),
         SLICE(X"3fd1677a36d23b",54),
         SLICE(X"3ff53bb5ed35db",54),
         SLICE(X"001dce09267eea",54),
         SLICE(X"00398ead90e65b",54),
         SLICE(X"003b866f9e1b7d",54),
         SLICE(X"0021ce3e2c9771",54),
         SLICE(X"3ff789585624b4",54),
         SLICE(X"3fd0c0d5badb5c",54),
         SLICE(X"3fc14052abd83e",54),
         SLICE(X"3fd24f7d12642d",54),
         SLICE(X"3ffc81ced7f667",54),
         SLICE(X"0029c623e39157",54),
         SLICE(X"00403483803058",54),
         SLICE(X"0031054dd14531",54),
         SLICE(X"000343b716be55",54),
         SLICE(X"3fd2450689b23e",54),
         SLICE(X"3fbe27e3428da3",54),
         SLICE(X"3fd63a9f26d25a",54),
         SLICE(X"000bdbdee19836",54),
         SLICE(X"00399ab61030f7",54),
         SLICE(X"003d09b3479eba",54),
         SLICE(X"0011f790bf3b61",54),
         SLICE(X"3fd8cea677f025",54),
         SLICE(X"3fbf51b80b1e2b",54),
         SLICE(X"3fdb4e90e1f912",54),
         SLICE(X"00161af3ea4a0a",54),
         SLICE(X"003d54094f3eef",54),
         SLICE(X"002e0323650f01",54),
         SLICE(X"3ff53b0e986a54",54),
         SLICE(X"3fc6aaf069c6ff",54),
         SLICE(X"3fce2a37b5cba1",54),
         SLICE(X"00057cd93a9203",54),
         SLICE(X"0037b158ad8ae1",54),
         SLICE(X"0032c3a5d0c99e",54),
         SLICE(X"3ffa192d78b57d",54),
         SLICE(X"3fc694d6dc3833",54),
         SLICE(X"3fcee28c91c83b",54),
         SLICE(X"000ca2e8fbe552",54),
         SLICE(X"003e1069ce6713",54),
         SLICE(X"002a935a1b04e6",54),
         SLICE(X"3fe52ad7dab710",54),
         SLICE(X"3fbd9977ee7581",54),
         SLICE(X"3fe57ba404fe49",54),
         SLICE(X"002f2bd6219759",54),
         SLICE(X"003e95df9f32ba",54),
         SLICE(X"3ffd4afcd2f3e2",54),
         SLICE(X"3fbee22162c616",54),
         SLICE(X"3fd7d344d32d24",54),
         SLICE(X"0027effc4f380d",54),
         SLICE(X"003fd1a7fb0508",54),
         SLICE(X"3ffc97fe270ef0",54),
         SLICE(X"3fbf39ad10e80f",54),
         SLICE(X"3fe252fb0deec7",54),
         SLICE(X"0031060b0fb5f5",54),
         SLICE(X"003362502b5aa1",54),
         SLICE(X"3fe6bf408aa83a",54),
         SLICE(X"3fc3e722630eda",54),
         SLICE(X"0000c0ae01128f",54),
         SLICE(X"0039d79bdee605",54),
         SLICE(X"0013c9c0b8f633",54),
         SLICE(X"3fcfecce0f1e71",54),
         SLICE(X"3fddf37c984abe",54),
         SLICE(X"00226d15c7304e",54),
         SLICE(X"0029869ecb28ce",54),
         SLICE(X"3febf25825ecd9",54),
         SLICE(X"3fd4ff944da4be",54),
         SLICE(X"0007471479db11",54),
         SLICE(X"002805f3f160bf",54),
         SLICE(X"0002923181a461",54),
         SLICE(X"3fdd9c7e9db26b",54),
         SLICE(X"3ff6e9194f23e4",54),
         SLICE(X"001bb951adb549",54),
         SLICE(X"000c8fcc578ebc",54),
         SLICE(X"3feac52fd37874",54),
         SLICE(X"3ff2596550cd98",54),
         SLICE(X"000f9cd8c3b9c4",54),
         SLICE(X"000d1fc8019d91",54),
         SLICE(X"3ff4d93ac06f67",54),
         SLICE(X"3ff453e4566300",54),
         SLICE(X"0007d43a75e8be",54),
         SLICE(X"0009d36a033745",54),
         SLICE(X"3ffa875b07bf56",54),
         SLICE(X"3ff80e9a58bb0e",54),
         SLICE(X"0003db51828b99",54),
         SLICE(X"00063b52f58d19",54),
         SLICE(X"3ffd378eb63991",54),
         SLICE(X"3ffb37c46e09b0",54),
         SLICE(X"00021709120a7f",54),
         SLICE(X"000399a06eef39",54),
         SLICE(X"3ffe58fc8fd408",54),
         SLICE(X"3ffd5a95b34987",54),
         SLICE(X"00015d53c129f3",54),
         SLICE(X"0001e09c7d2c23",54),
         SLICE(X"3ffedbebf35f7e",54),
         SLICE(X"3ffeb99baa9eb5",54),
         SLICE(X"0000ef690be411",54),
         SLICE(X"0000d63b6d38f6",54),
         SLICE(X"3fff3faef138da",54),
         SLICE(X"3fff752372b94b",54),
         SLICE(X"00009d761c3458",54),
         SLICE(X"000055b8c2e498",54),
         SLICE(X"3fff7a33a1eebf",54),
         SLICE(X"3fffd76af66192",54),
         SLICE(X"00006d9e6e9df7",54),
         SLICE(X"0000039c01dbe4",54),
         SLICE(X"3fffb22df6f751",54),
         SLICE(X"00000eb3818dda",54),
         SLICE(X"000030b233fb2a",54),
         SLICE(X"3ffff06b1341b2",54),
         SLICE(X"3fffdcd287feaf",54),
         SLICE(X"000011241401c4",54),
         SLICE(X"00001d1474c19b",54),
         SLICE(X"3fffe5055ce7a6",54),
         SLICE(X"3ffff2cb30f799",54),
         SLICE(X"00001c884aeac9",54),
         SLICE(X"3ffffada4c1307",54),
         SLICE(X"3ffff12e66d34d",54),
         SLICE(X"00000696399e1d",54),
         SLICE(X"0000076d470428",54),
         SLICE(X"3ffffdf751ce5b",54),
         SLICE(X"3ffff359533c64",54),
         SLICE(X"00000bd716aa43",54),
         SLICE(X"00000591ba5e32",54),
         SLICE(X"3fffee74896161",54),
         SLICE(X"00000ad80ab436",54),
         SLICE(X"0000037b6a8a63",54),
         SLICE(X"3ffff7e0e13f5f",54),
         SLICE(X"000001eaf15c0b",54),
         SLICE(X"001615c4a8d958",54),
         SLICE(X"3fc23891fa6e3e",54),
         SLICE(X"00393502337459",54),
         SLICE(X"3ff200cc6c68bb",54),
         SLICE(X"3fdb846c6c6cbd",54),
         SLICE(X"003e3eb72dbc4e",54),
         SLICE(X"3fce8acd005f85",54),
         SLICE(X"0007901b99b2e8",54),
         SLICE(X"002707911fbf65",54),
         SLICE(X"3fc0e9dd697e37",54),
         SLICE(X"0032d53b216f06",54),
         SLICE(X"3ff51613df563f",54),
         SLICE(X"3fdfe3ce6d866e",54),
         SLICE(X"0039580ec079be",54),
         SLICE(X"3fc6b3eb9982f8",54),
         SLICE(X"0020e4eb56ebe9",54),
         SLICE(X"0009d689da40e9",54),
         SLICE(X"3fcb4d80eba3b8",54),
         SLICE(X"0044630022d8b2",54),
         SLICE(X"3fd1f9219c92d5",54),
         SLICE(X"00078bc604fe8f",54),
         SLICE(X"000d4cedc18436",54),
         SLICE(X"3ff78ecf0b591f",54),
         SLICE(X"3ffd7c7140f8d9",54),
         SLICE(X"0002cf105488be",54),
         SLICE(X"0002479b0cdc50",54),
         SLICE(X"3ffe3a2c16b7d2",54),
         SLICE(X"3ffd2e36062e03",54),
         SLICE(X"0003646462fd06",54),
         SLICE(X"00006f93aa7cbd",54),
         SLICE(X"3ffd8f6e5d0faf",54),
         SLICE(X"000143e9f134b8",54),
         SLICE(X"3fffbb1ae7d6d9",54),
         SLICE(X"0000d3cac1620d",54),
         SLICE(X"3fff8b9b566648",54),
         SLICE(X"3ffe94fabc3d88",54),
         SLICE(X"00025bccd39676",54),
         SLICE(X"3ffeaa2eb2dcb2",54),
         SLICE(X"3fffc5c62e87ea",54),
         SLICE(X"00008d52ee3448",54),
         SLICE(X"3fffd5ee402df5",54),
         SLICE(X"3fffeeb8fe624b",54),
         SLICE(X"00000d4463cd1b",54),
         SLICE(X"00000ea6e91147",54),
         SLICE(X"00000dc0f7c5d3",54),
         SLICE(X"00000ab6bfe145",54),
         SLICE(X"0000066e968418",54),
         SLICE(X"0000025ba4e38d",54),
         SLICE(X"000000011c9249",54),
         SLICE(X"0000005d3bef58",54),
         SLICE(X"000003677d2fdf",54),
         SLICE(X"000007eee42da4",54),
         SLICE(X"00000bf33cd338",54),
         SLICE(X"00000d754ad4d0",54),
         SLICE(X"00000b6527996e",54),
         SLICE(X"00000649e27d1e",54),
         SLICE(X"0000002dcc2e00",54),
         SLICE(X"3ffffbbc06ea6f",54),
         SLICE(X"3ffffae13ddfd5",54),
         SLICE(X"3ffffd9f0d8eed",54),
         SLICE(X"000001d36a19dd",54),
         SLICE(X"0000044531c9f2",54),
         SLICE(X"0000028a8d0025",54),
         SLICE(X"3ffffcb82368b4",54),
         SLICE(X"3ffff5ab1a1d0a",54),
         SLICE(X"3ffff17bc5c844",54),
         SLICE(X"3ffff2da15c8a6",54),
         SLICE(X"3ffff9079f0aa1",54),
         SLICE(X"0000001323f30f",54),
         SLICE(X"0000037f026cfd",54),
         SLICE(X"000001aa546ae0",54),
         SLICE(X"3ffffd52b1c851",54),
         SLICE(X"3ffffba06332d9",54),
         SLICE(X"3fffffd9863aa7",54),
         SLICE(X"0000081c7212fe",54),
         SLICE(X"00000e4d8fec11",54),
         SLICE(X"00000d085bc9f3",54),
         SLICE(X"000004a3449c8d",54),
         SLICE(X"3ffffb6ee45f22",54),
         SLICE(X"3ffff84825f91e",54),
         SLICE(X"3ffffc126a1ba8",54),
         SLICE(X"000000b68af125",54),
         SLICE(X"3fffff71da2b17",54),
         SLICE(X"3ffff8950ae5d3",54),
         SLICE(X"3ffff422e67a36",54),
         SLICE(X"3ffff960439a9f",54),
         SLICE(X"000005cf747ef7",54),
         SLICE(X"00000e5ac5d95c",54),
         SLICE(X"00000b0c03cf45",54),
         SLICE(X"00000086044fe2",54),
         SLICE(X"3ffffb039d607e",54),
         SLICE(X"3fffff47a65e77",54),
         SLICE(X"000004284e8dba",54),
         SLICE(X"3ffffed9cfdfe9",54),
         SLICE(X"3ffff384af00e1",54),
         SLICE(X"3ffff258997f77",54),
         SLICE(X"0000014dffff10",54),
         SLICE(X"0000104a8b24c8",54),
         SLICE(X"00000c80ae98a9",54),
         SLICE(X"3ffffbe4ab3c4f",54),
         SLICE(X"3ffff6facfcfee",54),
         SLICE(X"000003fbb64aff",54),
         SLICE(X"00000a07e72377",54),
         SLICE(X"3ffff80aa96aa7",54),
         SLICE(X"3fffe799349691",54),
         SLICE(X"3ffffaaeab158e",54),
         SLICE(X"00001d9b8323bd",54),
         SLICE(X"0000189c6fb3c3",54),
         SLICE(X"3fffeb9a011181",54),
         SLICE(X"3fffdeda24f038",54),
         SLICE(X"00000f1798522b",54),
         SLICE(X"000029ac496b76",54),
         SLICE(X"3fffefb6686c86",54),
         SLICE(X"3fffbe5dc7736b",54),
         SLICE(X"000005db6dd23b",54),
         SLICE(X"00006267acd40d",54),
         SLICE(X"000019388b1704",54),
         SLICE(X"3fff82819b2bb8",54),
         SLICE(X"3fffbbc17eca4e",54),
         SLICE(X"000093c387f376",54),
         SLICE(X"00007546b6e1e5",54),
         SLICE(X"3fff4e6b45ddb8",54),
         SLICE(X"3fff49bb73fcb0",54),
         SLICE(X"0000dcb8f415bb",54),
         SLICE(X"0001177b7311c7",54),
         SLICE(X"3ffef000b3cdc1",54),
         SLICE(X"3ffe5e2ac83a51",54),
         SLICE(X"000146d9bec408",54),
         SLICE(X"0002567ac31f02",54),
         SLICE(X"3ffe77c91bcc0b",54),
         SLICE(X"3ffcc81f273f37",54),
         SLICE(X"0001e6e6b237ef",54),
         SLICE(X"00044f21ccfe2d",54),
         SLICE(X"3ffd83a2c4bcb2",54),
         SLICE(X"3ffa5823edd698",54),
         SLICE(X"0003667540a772",54),
         SLICE(X"00074628cb9d71",54),
         SLICE(X"3ffb35a702eaa0",54),
         SLICE(X"3ff6e3ddbb6f99",54),
         SLICE(X"0006d7f48920fb",54),
         SLICE(X"000b00d5c65069",54),
         SLICE(X"3ff6387e1ddbef",54),
         SLICE(X"3ff3581fb72d8e",54),
         SLICE(X"000dccdca92e7f",54),
         SLICE(X"000d9a44b24888",54),
         SLICE(X"3fed00a5873050",54),
         SLICE(X"3ff2caba45a94e",54),
         SLICE(X"00193857a3bd44",54),
         SLICE(X"000ab7ce4f905f",54),
         SLICE(X"3fe010ad3ea42f",54),
         SLICE(X"3ffa99008b9108",54),
         SLICE(X"002620818bce3a",54),
         SLICE(X"3ffccc728b1919",54),
         SLICE(X"3fd5b07c03dab2",54),
         SLICE(X"000efb60390fd6",54),
         SLICE(X"002ab5ecba9f61",54),
         SLICE(X"3fe3063baac4e1",54),
         SLICE(X"3fda5f1ffc4497",54),
         SLICE(X"002b3a167c98e4",54),
         SLICE(X"0019eecfd5ac07",54),
         SLICE(X"3fc923ca812029",54),
         SLICE(X"3ff86a4a323fa4",54),
         SLICE(X"003c5d961cd18f",54),
         SLICE(X"3ff0289858945d",54),
         SLICE(X"3fc7e1f68f5e13",54),
         SLICE(X"00289ac7bd0d24",54),
         SLICE(X"00275918a39a49",54),
         SLICE(X"3fc3a3d5855557",54),
         SLICE(X"3ff60213128aa2",54),
         SLICE(X"0042a50bc16858",54),
         SLICE(X"3fe559afeb8f85",54),
         SLICE(X"3fcc3b5fb1be7e",54),
         SLICE(X"003a1fca711286",54),
         SLICE(X"000ed274215787",54),
         SLICE(X"3fbc73fc6d4e0a",54),
         SLICE(X"001ff88c4dd5f7",54),
         SLICE(X"002b7cf222f712",54),
         SLICE(X"3fc040e207aeb5",54),
         SLICE(X"0006d29a555e02",54),
         SLICE(X"00389bd176dcd0",54),
         SLICE(X"3fca9ac777a636",54),
         SLICE(X"3ff678f9755a73",54),
         SLICE(X"003c44d77ccde6",54),
         SLICE(X"3fd300e76c76bf",54),
         SLICE(X"3feeb2b61b3c64",54),
         SLICE(X"003c7693ec9df5",54),
         SLICE(X"3fd68ec72bd0bf",54),
         SLICE(X"3fed2b831760ed",54),
         SLICE(X"003c1706e93db1",54),
         SLICE(X"3fd5192007fd47",54),
         SLICE(X"3ff0bdb53d1604",54),
         SLICE(X"003b4622161e3d",54),
         SLICE(X"3fcf287b504bae",54),
         SLICE(X"3ffa1ff0fc7a45",54),
         SLICE(X"0037d105295430",54),
         SLICE(X"3fc6399e14456d",54),
         SLICE(X"000ae5c51796fc",54),
         SLICE(X"002d2c5d352de9",54),
         SLICE(X"3fbecdf6d73c0b",54),
         SLICE(X"00228973241c27",54));

END FilterProgrammable_tb_data;
-- -------------------------------------------------------------
--
-- Module: FilterProgrammable_tb
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2022-04-22 00:03:00
-- -------------------------------------------------------------

-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

USE work.FilterProgrammable_tb_pkg.ALL;

USE work.FilterProgrammable_tb_data.ALL;

ENTITY FilterProgrammable_tb IS

END FilterProgrammable_tb;


ARCHITECTURE rtl OF FilterProgrammable_tb IS
  -- -------------------------------------------------------------
  -- Component Declarations
  -- -------------------------------------------------------------
  COMPONENT FilterProgrammable
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(23 DOWNTO 0); -- sfix24_En23
         write_enable                    :   IN    std_logic; 
         write_done                      :   IN    std_logic; 
         write_address                   :   IN    std_logic_vector(4 DOWNTO 0); -- ufix5
         coeffs_in                       :   IN    std_logic_vector(23 DOWNTO 0); -- sfix24_En23
         filter_out                      :   OUT   std_logic_vector(53 DOWNTO 0)  -- sfix54_En46
         );
  END COMPONENT;

  -- -------------------------------------------------------------
  -- Component Configuration Statements
  -- -------------------------------------------------------------
  FOR ALL : FilterProgrammable
    USE ENTITY work.FilterProgrammable(rtl);

  -- Constants
  CONSTANT clk_high                         : time := 5 ns;
  CONSTANT clk_low                          : time := 5 ns;
  CONSTANT clk_period                       : time := 10 ns;
  CONSTANT clk_hold                         : time := 2 ns;
  CONSTANT MAX_ERROR_COUNT                : integer := 423; -- uint32


  -- Signals
  SIGNAL clk                              : std_logic; -- boolean
  SIGNAL clk_enable                       : std_logic; -- boolean
  SIGNAL reset                            : std_logic; -- boolean
  SIGNAL filter_in                        : std_logic_vector(23 DOWNTO 0); -- sfix24_En23
  SIGNAL write_enable                     : std_logic; -- boolean
  SIGNAL write_done                       : std_logic; -- boolean
  SIGNAL write_address                    : std_logic_vector(4 DOWNTO 0); -- ufix5
  SIGNAL coeffs_in                        : std_logic_vector(23 DOWNTO 0); -- sfix24_En23
  SIGNAL filter_out                       : std_logic_vector(53 DOWNTO 0); -- sfix54_En46

  SIGNAL tb_enb                           : std_logic; -- boolean
  SIGNAL srcDone                          : std_logic; -- boolean
  SIGNAL snkDone                          : std_logic; -- boolean
  SIGNAL testFailure                      : std_logic; -- boolean
  SIGNAL tbenb_dly                        : std_logic; -- boolean
  SIGNAL rdEnb                            : std_logic; -- boolean
  SIGNAL filter_in_data_log_rdenb         : std_logic; -- boolean
  SIGNAL filter_in_data_log_addr          : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL filter_in_data_log_done          : std_logic; -- boolean
  SIGNAL write_enable_data_log_rdenb      : std_logic; -- boolean
  SIGNAL write_enable_data_log_addr       : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL write_enable_data_log_done       : std_logic; -- boolean
  SIGNAL write_done_data_log_rdenb        : std_logic; -- boolean
  SIGNAL write_done_data_log_addr         : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL write_done_data_log_done         : std_logic; -- boolean
  SIGNAL write_address_data_log_rdenb     : std_logic; -- boolean
  SIGNAL write_address_data_log_addr      : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL write_address_data_log_done      : std_logic; -- boolean
  SIGNAL coeffs_in_data_log_rdenb         : std_logic; -- boolean
  SIGNAL coeffs_in_data_log_addr          : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL coeffs_in_data_log_done          : std_logic; -- boolean
  SIGNAL filter_out_testFailure           : std_logic; -- boolean
  SIGNAL filter_out_errCnt                : integer; -- uint32
  SIGNAL delayLine_out                    : std_logic; -- boolean
  SIGNAL expected_ce_out                  : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 1); -- boolean
  SIGNAL filter_out_rdenb                 : std_logic; -- boolean
  SIGNAL filter_out_addr                  : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL filter_out_done                  : std_logic; -- boolean
  SIGNAL filter_out_ref                   : std_logic_vector(53 DOWNTO 0); -- sfix54_En46
  SIGNAL check1_Done                      : std_logic; -- boolean


BEGIN
  -- Component Instances
  u_FilterProgrammable: FilterProgrammable
    PORT MAP (
              clk                              => clk,
              clk_enable                       => clk_enable,
              reset                            => reset,
              filter_in                        => filter_in,
              write_enable                     => write_enable,
              write_done                       => write_done,
              write_address                    => write_address,
              coeffs_in                        => coeffs_in,
              filter_out                       => filter_out      );


  -- Block Statements
  -- -------------------------------------------------------------
  -- Driving the test bench enable
  -- -------------------------------------------------------------

  tb_enb <= '0' WHEN reset = '1' ELSE 
            '1' WHEN snkDone = '0' ELSE 
            '0' AFTER clk_period * 2;

  completed_msg: PROCESS (clk, reset)
  BEGIN
    IF (reset = '1') THEN 
       -- Nothing to reset here.
    ELSIF clk'event AND clk = '1' THEN
      IF snkDone='1' THEN
        IF (testFailure = '0') THEN
              ASSERT FALSE
                REPORT "**************TEST COMPLETED (PASSED)**************"
                SEVERITY NOTE;
        ELSE
              ASSERT FALSE
                REPORT "**************TEST COMPLETED (FAILED)**************"
                SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

  -- -------------------------------------------------------------
  -- System Clock (fast clock) and reset
  -- -------------------------------------------------------------

  clk_gen: PROCESS
  BEGIN
    clk <= '1';
    WAIT FOR clk_high;
    clk <= '0';
    WAIT FOR clk_low;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR clk_high;
      clk <= '0';
      WAIT FOR clk_low;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS
  BEGIN
    reset <= '1';
    WAIT FOR clk_period * 2;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR clk_hold;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  -- -------------------------------------------------------------
  -- Testbench clock enable
  -- -------------------------------------------------------------

  tb_enb_delay : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tbenb_dly <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF tb_enb = '1' THEN
        tbenb_dly <= tb_enb;
      END IF;
    END IF; 
  END PROCESS tb_enb_delay;

  rdEnb <= tbenb_dly WHEN snkDone =  '0' ELSE
           '0';

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  filter_in_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => filter_in_data_log_rdenb,
    addr      => filter_in_data_log_addr,
    done      => filter_in_data_log_done);

  filter_in_data_log_rdenb <= rdEnb;

  stimuli_filter_in_data_log : PROCESS(filter_in_data_log_addr, filter_in_data_log_rdenb)
  BEGIN
    IF filter_in_data_log_rdenb = '1' THEN
      filter_in <= filter_in_data_log_force(TO_INTEGER(filter_in_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_filter_in_data_log;

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  write_enable_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => write_enable_data_log_rdenb,
    addr      => write_enable_data_log_addr,
    done      => write_enable_data_log_done);

  write_enable_data_log_rdenb <= rdEnb;

  stimuli_write_enable_data_log : PROCESS(write_enable_data_log_addr, write_enable_data_log_rdenb)
  BEGIN
    IF write_enable_data_log_rdenb = '1' THEN
      write_enable <= write_enable_data_log_force(TO_INTEGER(write_enable_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_write_enable_data_log;

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  write_done_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => write_done_data_log_rdenb,
    addr      => write_done_data_log_addr,
    done      => write_done_data_log_done);

  write_done_data_log_rdenb <= rdEnb;

  stimuli_write_done_data_log : PROCESS(write_done_data_log_addr, write_done_data_log_rdenb)
  BEGIN
    IF write_done_data_log_rdenb = '1' THEN
      write_done <= write_done_data_log_force(TO_INTEGER(write_done_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_write_done_data_log;

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  write_address_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => write_address_data_log_rdenb,
    addr      => write_address_data_log_addr,
    done      => write_address_data_log_done);

  write_address_data_log_rdenb <= rdEnb;

  stimuli_write_address_data_log : PROCESS(write_address_data_log_addr, write_address_data_log_rdenb)
  BEGIN
    IF write_address_data_log_rdenb = '1' THEN
      write_address <= write_address_data_log_force(TO_INTEGER(write_address_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_write_address_data_log;

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  coeffs_in_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => coeffs_in_data_log_rdenb,
    addr      => coeffs_in_data_log_addr,
    done      => coeffs_in_data_log_done);

  coeffs_in_data_log_rdenb <= rdEnb;

  stimuli_coeffs_in_data_log : PROCESS(coeffs_in_data_log_addr, coeffs_in_data_log_rdenb)
  BEGIN
    IF coeffs_in_data_log_rdenb = '1' THEN
      coeffs_in <= coeffs_in_data_log_force(TO_INTEGER(coeffs_in_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_coeffs_in_data_log;

  -- -------------------------------------------------------------
  -- Create done signal for Input data
  -- -------------------------------------------------------------

  srcDone <= filter_in_data_log_done AND write_enable_data_log_done AND write_done_data_log_done AND write_address_data_log_done AND coeffs_in_data_log_done;


  ceout_delayLine : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe(0 TO 1) <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN 
      IF clk_enable = '1' THEN
        int_delay_pipe(0) <= rdEnb;
        int_delay_pipe(1) <= int_delay_pipe(0);
      END IF;
    END IF; 
  END PROCESS ceout_delayLine;

  delayLine_out <= int_delay_pipe(1);

  expected_ce_out <=  delayLine_out AND clk_enable;

  -- -------------------------------------------------------------
  --  Checker: Checking the data received from the DUT.
  -- -------------------------------------------------------------

  filter_out_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => filter_out_rdenb,
    addr      => filter_out_addr,
    done      => filter_out_done);

  filter_out_rdenb <= expected_ce_out;

  filter_out_ref <= filter_out_expected(TO_INTEGER(filter_out_addr));
  checker_1: PROCESS(clk, reset)
  BEGIN
    IF reset = '1' THEN
      filter_out_errCnt <= 0;
      filter_out_testFailure <= '0';
    ELSIF clk'event and clk ='1' THEN
      IF filter_out_rdenb = '1' THEN
        IF filter_out /= filter_out_expected(TO_INTEGER(filter_out_addr)) THEN
          filter_out_errCnt <= filter_out_errCnt + 1;
          filter_out_testFailure <= '1';
          ASSERT FALSE 
            REPORT "Error in filter_out: Expected " 
            & to_hex(filter_out_expected(TO_INTEGER(filter_out_addr)))
            & " Actual "
            & to_hex(filter_out)
            SEVERITY ERROR;
          IF filter_out_errCnt >= MAX_ERROR_COUNT THEN
            ASSERT FALSE
              REPORT "Number of errors have exceeded the maximum error"
              SEVERITY Warning;
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS checker_1;

  checkDone_1: PROCESS(clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_Done <= '0';
    ELSIF clk'event and clk ='1' THEN
      IF check1_Done = '0' AND filter_out_done = '1' AND filter_out_rdenb = '1' THEN
        check1_Done <= '1';
      END IF;
    END IF;
  END PROCESS checkDone_1;
  -- -------------------------------------------------------------
  -- Create done and test failure signal for output data
  -- -------------------------------------------------------------

  snkDone <= check1_Done;

  testFailure <= filter_out_testFailure;

  -- -------------------------------------------------------------
  -- Global clock enable
  -- -------------------------------------------------------------
  clk_enable <= tbenb_dly AFTER clk_hold WHEN snkDone = '0' ELSE
                '0' AFTER clk_hold;

  -- Assignment Statements



END rtl;
