-- -------------------------------------------------------------
--
-- Module: FilterProgrammable
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2022-04-22 00:02:53
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Seth\AppData\Local\Temp\tp16d74763_2c45_4386_b5da_7c28c301d87d
-- Name: FilterProgrammable
-- CoefficientSource: ProcessorInterface
-- InputDataType: numerictype(1,24,23)
-- TestBenchName: FilterProgrammable_tb
-- TestBenchUserStimulus:  User data, length 200
-- TestBenchCoeffStimulus: [0.0024229  -0.0020832  -0.0067703    0.016732   -0.011117  -0.0062311   0.0084016   0.0092568   -0.012983   -0.010121    0.018274    0.011432   -0.026176   -0.012489    0.037997    0.013389   -0.058155   -0.014048     0.10272    0.014462    -0.31717     0.48539]

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 43
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s24,23 -> [-1 1)
-- -------------------------------------------------------------
-- Multipliers           : 22


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FilterProgrammable IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(23 DOWNTO 0); -- sfix24_En23
         write_enable                    :   IN    std_logic; 
         write_done                      :   IN    std_logic; 
         write_address                   :   IN    std_logic_vector(4 DOWNTO 0); -- ufix5
         coeffs_in                       :   IN    std_logic_vector(23 DOWNTO 0); -- sfix24_En23
         filter_out                      :   OUT   std_logic_vector(53 DOWNTO 0)  -- sfix54_En46
         );

END FilterProgrammable;


----------------------------------------------------------------
--Module Architecture: FilterProgrammable
----------------------------------------------------------------
ARCHITECTURE rtl OF FilterProgrammable IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(23 DOWNTO 0); -- sfix24_En23
  TYPE register_file_type IS ARRAY (NATURAL range <>) OF signed(23 DOWNTO 0); -- sfix24_En23
  -- Constants
  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 42); -- sfix24_En23
  SIGNAL write_address_reg                : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL coeffs_in_reg                    : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL write_enable_reg                 : std_logic; -- boolean
  SIGNAL write_done_reg                   : std_logic; -- boolean
  SIGNAL coeffs_assigned                  : register_file_type(0 TO 21); -- sfix24_En23
  SIGNAL coeffs_temp                      : register_file_type(0 TO 21); -- sfix24_En23
  SIGNAL coeffs_regs                      : register_file_type(0 TO 21); -- sfix24_En23
  SIGNAL coeffs_shadow                    : register_file_type(0 TO 21); -- sfix24_En23
  SIGNAL tapsum1                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand                     : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum2                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_1                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum3                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_2                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum4                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_3                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum5                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_4                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum6                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_5                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum7                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_6                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum8                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_7                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum9                          : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_8                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum10                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_9                   : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum11                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_10                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum12                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_11                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum13                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_12                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum14                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_13                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum15                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_14                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum16                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_15                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum17                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_16                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum18                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_17                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum19                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_18                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum20                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_19                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum21                         : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL tapsum_mcand_20                  : signed(24 DOWNTO 0); -- sfix25_En23
  SIGNAL product22                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL mul_temp                         : signed(47 DOWNTO 0); -- sfix48_En46
  SIGNAL product21                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product20                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product19                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product18                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product17                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product16                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product15                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product14                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product13                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product12                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product11                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product10                        : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product9                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product8                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product7                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product6                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product5                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product4                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product3                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product2                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL product1_cast                    : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL product1                         : signed(48 DOWNTO 0); -- sfix49_En46
  SIGNAL sum1                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp                         : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum2                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_1                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum3                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_2                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum4                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_3                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum5                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_4                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum6                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_5                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum7                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_6                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum8                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_7                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum9                             : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_8                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum10                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_9                       : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum11                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_10                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum12                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_11                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum13                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_12                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum14                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_13                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum15                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_14                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum16                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_15                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum17                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_16                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum18                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_17                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum19                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_18                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum20                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_19                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL sum21                            : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL add_temp_20                      : signed(54 DOWNTO 0); -- sfix55_En46
  SIGNAL output_typeconvert               : signed(53 DOWNTO 0); -- sfix54_En46
  SIGNAL output_register                  : signed(53 DOWNTO 0); -- sfix54_En46


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 42) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 42) <= delay_pipeline(0 TO 41);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  Input_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_enable_reg <= '0';
      write_done_reg <= '0';
      write_address_reg <= (OTHERS => '0');
      coeffs_in_reg <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        write_enable_reg <= write_enable;
        write_done_reg <= write_done;
        write_address_reg <= unsigned(write_address);
        coeffs_in_reg <= signed(coeffs_in);
      END IF;
    END IF; 
  END PROCESS Input_Register_process;

  coeffs_assigned(0) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(0, 5) ) ELSE
                        coeffs_regs(0);
  coeffs_assigned(1) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(1, 5) ) ELSE
                        coeffs_regs(1);
  coeffs_assigned(2) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(2, 5) ) ELSE
                        coeffs_regs(2);
  coeffs_assigned(3) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(3, 5) ) ELSE
                        coeffs_regs(3);
  coeffs_assigned(4) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(4, 5) ) ELSE
                        coeffs_regs(4);
  coeffs_assigned(5) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(5, 5) ) ELSE
                        coeffs_regs(5);
  coeffs_assigned(6) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(6, 5) ) ELSE
                        coeffs_regs(6);
  coeffs_assigned(7) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(7, 5) ) ELSE
                        coeffs_regs(7);
  coeffs_assigned(8) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(8, 5) ) ELSE
                        coeffs_regs(8);
  coeffs_assigned(9) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(9, 5) ) ELSE
                        coeffs_regs(9);
  coeffs_assigned(10) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(10, 5) ) ELSE
                         coeffs_regs(10);
  coeffs_assigned(11) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(11, 5) ) ELSE
                         coeffs_regs(11);
  coeffs_assigned(12) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(12, 5) ) ELSE
                         coeffs_regs(12);
  coeffs_assigned(13) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(13, 5) ) ELSE
                         coeffs_regs(13);
  coeffs_assigned(14) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(14, 5) ) ELSE
                         coeffs_regs(14);
  coeffs_assigned(15) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(15, 5) ) ELSE
                         coeffs_regs(15);
  coeffs_assigned(16) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(16, 5) ) ELSE
                         coeffs_regs(16);
  coeffs_assigned(17) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(17, 5) ) ELSE
                         coeffs_regs(17);
  coeffs_assigned(18) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(18, 5) ) ELSE
                         coeffs_regs(18);
  coeffs_assigned(19) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(19, 5) ) ELSE
                         coeffs_regs(19);
  coeffs_assigned(20) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(20, 5) ) ELSE
                         coeffs_regs(20);
  coeffs_assigned(21) <= coeffs_in_reg WHEN ( write_address_reg = to_unsigned(21, 5) ) ELSE
                         coeffs_regs(21);
  coeffs_temp <= coeffs_assigned WHEN ( write_enable_reg = '1' ) ELSE
                 coeffs_regs;
  Coeffs_Registers_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffs_regs <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        coeffs_regs(0 TO 21) <= coeffs_temp(0 TO 21);
      END IF;
    END IF; 
  END PROCESS Coeffs_Registers_process;

  Coeffs_Shadow_Regs_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      coeffs_shadow <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF write_done_reg = '1' THEN
        coeffs_shadow(0 TO 21) <= coeffs_regs(0 TO 21);
      END IF;
    END IF; 
  END PROCESS Coeffs_Shadow_Regs_process;

  tapsum1 <= resize(delay_pipeline(0), 25) + resize(delay_pipeline(42), 25);

  tapsum_mcand <= tapsum1;

  tapsum2 <= resize(delay_pipeline(1), 25) + resize(delay_pipeline(41), 25);

  tapsum_mcand_1 <= tapsum2;

  tapsum3 <= resize(delay_pipeline(2), 25) + resize(delay_pipeline(40), 25);

  tapsum_mcand_2 <= tapsum3;

  tapsum4 <= resize(delay_pipeline(3), 25) + resize(delay_pipeline(39), 25);

  tapsum_mcand_3 <= tapsum4;

  tapsum5 <= resize(delay_pipeline(4), 25) + resize(delay_pipeline(38), 25);

  tapsum_mcand_4 <= tapsum5;

  tapsum6 <= resize(delay_pipeline(5), 25) + resize(delay_pipeline(37), 25);

  tapsum_mcand_5 <= tapsum6;

  tapsum7 <= resize(delay_pipeline(6), 25) + resize(delay_pipeline(36), 25);

  tapsum_mcand_6 <= tapsum7;

  tapsum8 <= resize(delay_pipeline(7), 25) + resize(delay_pipeline(35), 25);

  tapsum_mcand_7 <= tapsum8;

  tapsum9 <= resize(delay_pipeline(8), 25) + resize(delay_pipeline(34), 25);

  tapsum_mcand_8 <= tapsum9;

  tapsum10 <= resize(delay_pipeline(9), 25) + resize(delay_pipeline(33), 25);

  tapsum_mcand_9 <= tapsum10;

  tapsum11 <= resize(delay_pipeline(10), 25) + resize(delay_pipeline(32), 25);

  tapsum_mcand_10 <= tapsum11;

  tapsum12 <= resize(delay_pipeline(11), 25) + resize(delay_pipeline(31), 25);

  tapsum_mcand_11 <= tapsum12;

  tapsum13 <= resize(delay_pipeline(12), 25) + resize(delay_pipeline(30), 25);

  tapsum_mcand_12 <= tapsum13;

  tapsum14 <= resize(delay_pipeline(13), 25) + resize(delay_pipeline(29), 25);

  tapsum_mcand_13 <= tapsum14;

  tapsum15 <= resize(delay_pipeline(14), 25) + resize(delay_pipeline(28), 25);

  tapsum_mcand_14 <= tapsum15;

  tapsum16 <= resize(delay_pipeline(15), 25) + resize(delay_pipeline(27), 25);

  tapsum_mcand_15 <= tapsum16;

  tapsum17 <= resize(delay_pipeline(16), 25) + resize(delay_pipeline(26), 25);

  tapsum_mcand_16 <= tapsum17;

  tapsum18 <= resize(delay_pipeline(17), 25) + resize(delay_pipeline(25), 25);

  tapsum_mcand_17 <= tapsum18;

  tapsum19 <= resize(delay_pipeline(18), 25) + resize(delay_pipeline(24), 25);

  tapsum_mcand_18 <= tapsum19;

  tapsum20 <= resize(delay_pipeline(19), 25) + resize(delay_pipeline(23), 25);

  tapsum_mcand_19 <= tapsum20;

  tapsum21 <= resize(delay_pipeline(20), 25) + resize(delay_pipeline(22), 25);

  tapsum_mcand_20 <= tapsum21;

  mul_temp <= delay_pipeline(21) * coeffs_shadow(21);
  product22 <= resize(mul_temp, 49);

  product21 <= tapsum_mcand_20 * coeffs_shadow(20);

  product20 <= tapsum_mcand_19 * coeffs_shadow(19);

  product19 <= tapsum_mcand_18 * coeffs_shadow(18);

  product18 <= tapsum_mcand_17 * coeffs_shadow(17);

  product17 <= tapsum_mcand_16 * coeffs_shadow(16);

  product16 <= tapsum_mcand_15 * coeffs_shadow(15);

  product15 <= tapsum_mcand_14 * coeffs_shadow(14);

  product14 <= tapsum_mcand_13 * coeffs_shadow(13);

  product13 <= tapsum_mcand_12 * coeffs_shadow(12);

  product12 <= tapsum_mcand_11 * coeffs_shadow(11);

  product11 <= tapsum_mcand_10 * coeffs_shadow(10);

  product10 <= tapsum_mcand_9 * coeffs_shadow(9);

  product9 <= tapsum_mcand_8 * coeffs_shadow(8);

  product8 <= tapsum_mcand_7 * coeffs_shadow(7);

  product7 <= tapsum_mcand_6 * coeffs_shadow(6);

  product6 <= tapsum_mcand_5 * coeffs_shadow(5);

  product5 <= tapsum_mcand_4 * coeffs_shadow(4);

  product4 <= tapsum_mcand_3 * coeffs_shadow(3);

  product3 <= tapsum_mcand_2 * coeffs_shadow(2);

  product2 <= tapsum_mcand_1 * coeffs_shadow(1);

  product1_cast <= resize(product1, 54);

  product1 <= tapsum_mcand * coeffs_shadow(0);

  add_temp <= resize(product1_cast, 55) + resize(product2, 55);
  sum1 <= add_temp(53 DOWNTO 0);

  add_temp_1 <= resize(sum1, 55) + resize(product3, 55);
  sum2 <= add_temp_1(53 DOWNTO 0);

  add_temp_2 <= resize(sum2, 55) + resize(product4, 55);
  sum3 <= add_temp_2(53 DOWNTO 0);

  add_temp_3 <= resize(sum3, 55) + resize(product5, 55);
  sum4 <= add_temp_3(53 DOWNTO 0);

  add_temp_4 <= resize(sum4, 55) + resize(product6, 55);
  sum5 <= add_temp_4(53 DOWNTO 0);

  add_temp_5 <= resize(sum5, 55) + resize(product7, 55);
  sum6 <= add_temp_5(53 DOWNTO 0);

  add_temp_6 <= resize(sum6, 55) + resize(product8, 55);
  sum7 <= add_temp_6(53 DOWNTO 0);

  add_temp_7 <= resize(sum7, 55) + resize(product9, 55);
  sum8 <= add_temp_7(53 DOWNTO 0);

  add_temp_8 <= resize(sum8, 55) + resize(product10, 55);
  sum9 <= add_temp_8(53 DOWNTO 0);

  add_temp_9 <= resize(sum9, 55) + resize(product11, 55);
  sum10 <= add_temp_9(53 DOWNTO 0);

  add_temp_10 <= resize(sum10, 55) + resize(product12, 55);
  sum11 <= add_temp_10(53 DOWNTO 0);

  add_temp_11 <= resize(sum11, 55) + resize(product13, 55);
  sum12 <= add_temp_11(53 DOWNTO 0);

  add_temp_12 <= resize(sum12, 55) + resize(product14, 55);
  sum13 <= add_temp_12(53 DOWNTO 0);

  add_temp_13 <= resize(sum13, 55) + resize(product15, 55);
  sum14 <= add_temp_13(53 DOWNTO 0);

  add_temp_14 <= resize(sum14, 55) + resize(product16, 55);
  sum15 <= add_temp_14(53 DOWNTO 0);

  add_temp_15 <= resize(sum15, 55) + resize(product17, 55);
  sum16 <= add_temp_15(53 DOWNTO 0);

  add_temp_16 <= resize(sum16, 55) + resize(product18, 55);
  sum17 <= add_temp_16(53 DOWNTO 0);

  add_temp_17 <= resize(sum17, 55) + resize(product19, 55);
  sum18 <= add_temp_17(53 DOWNTO 0);

  add_temp_18 <= resize(sum18, 55) + resize(product20, 55);
  sum19 <= add_temp_18(53 DOWNTO 0);

  add_temp_19 <= resize(sum19, 55) + resize(product21, 55);
  sum20 <= add_temp_19(53 DOWNTO 0);

  add_temp_20 <= resize(sum20, 55) + resize(product22, 55);
  sum21 <= add_temp_20(53 DOWNTO 0);

  output_typeconvert <= sum21;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
