// -------------------------------------------------------------
//
// Module: highpass
// Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
// Generated on: 2022-04-20 11:23:19
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FoldingFactor: 96
// Name: highpass
// TargetLanguage: Verilog
// TestBenchStimulus: step ramp chirp 
// GenerateHDLTestBench: off
// InlineConfigurations: off

// Filter Specifications:
//
// Sample Rate     : N/A (normalized frequency)
// Response        : Highpass
// Specification   : Fst,Fp,Ast,Ap
// Passband Ripple : 1 dB
// Stopband Edge   : 0.4
// Stopband Atten. : 80 dB
// Passband Edge   : 0.5
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Folding Factor        : 96
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II, Second-Order Sections
// Number of Sections  : 16
// Stable              : Yes
// Linear Phase        : No
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module highpass
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: highpass
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter scaleconst1 = 4.8653685866325319E-01; //double
  parameter coeff_b1_section1 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section1 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section1 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section1 = -4.2539516408305694E-02; //double
  parameter coeff_a3_section1 = 9.0360791824470721E-01; //double
  parameter scaleconst2 = 4.4396200145984949E-01; //double
  parameter coeff_b1_section2 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section2 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section2 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section2 = -3.8817056733695531E-02; //double
  parameter coeff_a3_section2 = 7.3703094910570266E-01; //double
  parameter scaleconst3 = 4.0874580577502378E-01; //double
  parameter coeff_b1_section3 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section3 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section3 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section3 = -3.5737989017657158E-02; //double
  parameter coeff_a3_section3 = 5.9924523408243824E-01; //double
  parameter scaleconst4 = 3.7942871437103926E-01; //double
  parameter coeff_b1_section4 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section4 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section4 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section4 = -3.3174699374504395E-02; //double
  parameter coeff_a3_section4 = 4.8454015810965256E-01; //double
  parameter scaleconst5 = 3.5491148265626715E-01; //double
  parameter coeff_b1_section5 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section5 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section5 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section5 = -3.1031077237258183E-02; //double
  parameter coeff_a3_section5 = 3.8861485338781038E-01; //double
  parameter scaleconst6 = 3.3435552113364359E-01; //double
  parameter coeff_b1_section6 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section6 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section6 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section6 = -2.9233801970420952E-02; //double
  parameter coeff_a3_section6 = 3.0818828256415343E-01; //double
  parameter scaleconst7 = 3.1711430300748100E-01; //double
  parameter coeff_b1_section7 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section7 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section7 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section7 = -2.7726345611632106E-02; //double
  parameter coeff_a3_section7 = 2.4073086641829178E-01; //double
  parameter scaleconst8 = 3.0268530625037493E-01; //double
  parameter coeff_b1_section8 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section8 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section8 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section8 = -2.6464771008649898E-02; //double
  parameter coeff_a3_section8 = 1.8427645399284970E-01; //double
  parameter scaleconst9 = 2.9067582535341507E-01; //double
  parameter coeff_b1_section9 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section9 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section9 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section9 = -2.5414742628323116E-02; //double
  parameter coeff_a3_section9 = 1.3728855878533711E-01; //double
  parameter scaleconst10 = 2.8077834251452211E-01; //double
  parameter coeff_b1_section10 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section10 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section10 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section10 = -2.4549373178652252E-02; //double
  parameter coeff_a3_section10 = 9.8563996879436330E-02; //double
  parameter scaleconst11 = 2.7275261758897318E-01; //double
  parameter coeff_b1_section11 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section11 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section11 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section11 = -2.3847657674308034E-02; //double
  parameter coeff_a3_section11 = 6.7162812681584735E-02; //double
  parameter scaleconst12 = 2.6641259456375294E-01; //double
  parameter coeff_b1_section12 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section12 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section12 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section12 = -2.3293328626656042E-02; //double
  parameter coeff_a3_section12 = 4.2357049628355826E-02; //double
  parameter scaleconst13 = 2.6161683497056215E-01; //double
  parameter coeff_b1_section13 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section13 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section13 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section13 = -2.2874019605618377E-02; //double
  parameter coeff_a3_section13 = 2.3593320276630234E-02; //double
  parameter scaleconst14 = 2.5826159775521706E-01; //double
  parameter coeff_b1_section14 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section14 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section14 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section14 = -2.2580660189914337E-02; //double
  parameter coeff_a3_section14 = 1.0465730830953809E-02; //double
  parameter scaleconst15 = 2.5627596525472846E-01; //double
  parameter coeff_b1_section15 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section15 = -2.0000000000000000E+00; //double
  parameter coeff_b3_section15 = 1.0000000000000000E+00; //double
  parameter coeff_a2_section15 = -2.2407049815219449E-02; //double
  parameter coeff_a3_section15 = 2.6968112036942224E-03; //double
  parameter scaleconst16 = 5.0558739383253026E-01; //double
  parameter coeff_b1_section16 = 1.0000000000000000E+00; //double
  parameter coeff_b2_section16 = -1.0000000000000000E+00; //double
  parameter coeff_b3_section16 = 0.0000000000000000E+00; //double
  parameter coeff_a2_section16 = -1.1174787665060455E-02; //double
  parameter coeff_a3_section16 = 0.0000000000000000E+00; //double
  // Signals
  real input_register; // double
  reg  [6:0] cur_count; // ufix7
  wire phase_0; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  wire phase_5; // boolean
  wire phase_6; // boolean
  wire phase_8; // boolean
  wire phase_9; // boolean
  wire phase_11; // boolean
  wire phase_12; // boolean
  wire phase_14; // boolean
  wire phase_15; // boolean
  wire phase_17; // boolean
  wire phase_18; // boolean
  wire phase_20; // boolean
  wire phase_21; // boolean
  wire phase_23; // boolean
  wire phase_24; // boolean
  wire phase_26; // boolean
  wire phase_27; // boolean
  wire phase_29; // boolean
  wire phase_30; // boolean
  wire phase_32; // boolean
  wire phase_33; // boolean
  wire phase_35; // boolean
  wire phase_36; // boolean
  wire phase_38; // boolean
  wire phase_39; // boolean
  wire phase_41; // boolean
  wire phase_42; // boolean
  wire phase_44; // boolean
  wire phase_45; // boolean
  wire phase_47; // boolean
  wire phase_48; // boolean
  wire phase_50; // boolean
  wire phase_51; // boolean
  wire phase_53; // boolean
  wire phase_54; // boolean
  wire phase_56; // boolean
  wire phase_57; // boolean
  wire phase_59; // boolean
  wire phase_60; // boolean
  wire phase_62; // boolean
  wire phase_63; // boolean
  wire phase_65; // boolean
  wire phase_66; // boolean
  wire phase_68; // boolean
  wire phase_69; // boolean
  wire phase_71; // boolean
  wire phase_72; // boolean
  wire phase_74; // boolean
  wire phase_75; // boolean
  wire phase_77; // boolean
  wire phase_78; // boolean
  wire phase_80; // boolean
  wire phase_81; // boolean
  wire phase_83; // boolean
  wire phase_84; // boolean
  wire phase_86; // boolean
  wire phase_87; // boolean
  wire phase_89; // boolean
  wire phase_90; // boolean
  wire phase_92; // boolean
  wire phase_93; // boolean
  wire phase_95; // boolean
  real sectionipconvert; // double
  real storagetypeconvert; // double
  real prev_stg_op1; // double
  real prev_stg_op2; // double
  real prev_stg_op3; // double
  real prev_stg_op4; // double
  real prev_stg_op5; // double
  real prev_stg_op6; // double
  real prev_stg_op7; // double
  real prev_stg_op8; // double
  real prev_stg_op9; // double
  real prev_stg_op10; // double
  real prev_stg_op11; // double
  real prev_stg_op12; // double
  real prev_stg_op13; // double
  real prev_stg_op14; // double
  real prev_stg_op15; // double
  real storage_state_in1; // double
  real delay_section1 [0:1] ; // double
  real storage_state_in2; // double
  real delay_section2 [0:1] ; // double
  real storage_state_in3; // double
  real delay_section3 [0:1] ; // double
  real storage_state_in4; // double
  real delay_section4 [0:1] ; // double
  real storage_state_in5; // double
  real delay_section5 [0:1] ; // double
  real storage_state_in6; // double
  real delay_section6 [0:1] ; // double
  real storage_state_in7; // double
  real delay_section7 [0:1] ; // double
  real storage_state_in8; // double
  real delay_section8 [0:1] ; // double
  real storage_state_in9; // double
  real delay_section9 [0:1] ; // double
  real storage_state_in10; // double
  real delay_section10 [0:1] ; // double
  real storage_state_in11; // double
  real delay_section11 [0:1] ; // double
  real storage_state_in12; // double
  real delay_section12 [0:1] ; // double
  real storage_state_in13; // double
  real delay_section13 [0:1] ; // double
  real storage_state_in14; // double
  real delay_section14 [0:1] ; // double
  real storage_state_in15; // double
  real delay_section15 [0:1] ; // double
  real storage_state_in16; // double
  real delay_section16 [0:1] ; // double
  real inputmux_section_1; // double
  real coeffmux_section_1; // double
  real prod; // double
  real prod_den; // double
  real prod_den_cast_temp; // double
  real prod_den_cast; // double
  real prod_den_cast_neg; // double
  real prod_num; // double
  real prod_num_cast_temp; // double
  real prod_num_cast; // double
  real accum_mux_in1; // double
  real accum_mux_in2; // double
  real accum_mux_out; // double
  real accum_mux_in1_temp; // double
  real sectionipconvert_cast; // double
  wire final_phase; // boolean
  wire section_phase; // boolean
  real accum_reg; // double
  real acc_out_cast_numacc; // double
  real sectionopconvert; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= $bitstoreal(filter_in);
        end
      end
    end // input_reg_process

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 7'b0000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 7'b1011111) begin
            cur_count <= 7'b0000000;
          end
          else begin
            cur_count <= cur_count + 7'b0000001;
          end
        end
      end
    end // Counter_process

  assign  phase_0 = (cur_count == 7'b0000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_2 = (cur_count == 7'b0000010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_3 = (cur_count == 7'b0000011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_5 = (cur_count == 7'b0000101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_6 = (cur_count == 7'b0000110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_8 = (cur_count == 7'b0001000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_9 = (cur_count == 7'b0001001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_11 = (cur_count == 7'b0001011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_12 = (cur_count == 7'b0001100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_14 = (cur_count == 7'b0001110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_15 = (cur_count == 7'b0001111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_17 = (cur_count == 7'b0010001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_18 = (cur_count == 7'b0010010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_20 = (cur_count == 7'b0010100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_21 = (cur_count == 7'b0010101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_23 = (cur_count == 7'b0010111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_24 = (cur_count == 7'b0011000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_26 = (cur_count == 7'b0011010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_27 = (cur_count == 7'b0011011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_29 = (cur_count == 7'b0011101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_30 = (cur_count == 7'b0011110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_32 = (cur_count == 7'b0100000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_33 = (cur_count == 7'b0100001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_35 = (cur_count == 7'b0100011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_36 = (cur_count == 7'b0100100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_38 = (cur_count == 7'b0100110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_39 = (cur_count == 7'b0100111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_41 = (cur_count == 7'b0101001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_42 = (cur_count == 7'b0101010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_44 = (cur_count == 7'b0101100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_45 = (cur_count == 7'b0101101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_47 = (cur_count == 7'b0101111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_48 = (cur_count == 7'b0110000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_50 = (cur_count == 7'b0110010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_51 = (cur_count == 7'b0110011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_53 = (cur_count == 7'b0110101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_54 = (cur_count == 7'b0110110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_56 = (cur_count == 7'b0111000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_57 = (cur_count == 7'b0111001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_59 = (cur_count == 7'b0111011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_60 = (cur_count == 7'b0111100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_62 = (cur_count == 7'b0111110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_63 = (cur_count == 7'b0111111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_65 = (cur_count == 7'b1000001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_66 = (cur_count == 7'b1000010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_68 = (cur_count == 7'b1000100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_69 = (cur_count == 7'b1000101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_71 = (cur_count == 7'b1000111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_72 = (cur_count == 7'b1001000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_74 = (cur_count == 7'b1001010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_75 = (cur_count == 7'b1001011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_77 = (cur_count == 7'b1001101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_78 = (cur_count == 7'b1001110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_80 = (cur_count == 7'b1010000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_81 = (cur_count == 7'b1010001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_83 = (cur_count == 7'b1010011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_84 = (cur_count == 7'b1010100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_86 = (cur_count == 7'b1010110 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_87 = (cur_count == 7'b1010111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_89 = (cur_count == 7'b1011001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_90 = (cur_count == 7'b1011010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_92 = (cur_count == 7'b1011100 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_93 = (cur_count == 7'b1011101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_95 = (cur_count == 7'b1011111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;


  // Next stage input = Previous stage output. Storing Previous stage output
  always @ (posedge clk or posedge reset)
    begin: prev_stg_op1_process
      if (reset == 1'b1) begin
        prev_stg_op1 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_5 == 1'b1) begin
          prev_stg_op1 <= sectionopconvert;
        end
      end
    end // prev_stg_op1_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op2_process
      if (reset == 1'b1) begin
        prev_stg_op2 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_11 == 1'b1) begin
          prev_stg_op2 <= sectionopconvert;
        end
      end
    end // prev_stg_op2_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op3_process
      if (reset == 1'b1) begin
        prev_stg_op3 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_17 == 1'b1) begin
          prev_stg_op3 <= sectionopconvert;
        end
      end
    end // prev_stg_op3_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op4_process
      if (reset == 1'b1) begin
        prev_stg_op4 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_23 == 1'b1) begin
          prev_stg_op4 <= sectionopconvert;
        end
      end
    end // prev_stg_op4_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op5_process
      if (reset == 1'b1) begin
        prev_stg_op5 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_29 == 1'b1) begin
          prev_stg_op5 <= sectionopconvert;
        end
      end
    end // prev_stg_op5_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op6_process
      if (reset == 1'b1) begin
        prev_stg_op6 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_35 == 1'b1) begin
          prev_stg_op6 <= sectionopconvert;
        end
      end
    end // prev_stg_op6_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op7_process
      if (reset == 1'b1) begin
        prev_stg_op7 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_41 == 1'b1) begin
          prev_stg_op7 <= sectionopconvert;
        end
      end
    end // prev_stg_op7_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op8_process
      if (reset == 1'b1) begin
        prev_stg_op8 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_47 == 1'b1) begin
          prev_stg_op8 <= sectionopconvert;
        end
      end
    end // prev_stg_op8_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op9_process
      if (reset == 1'b1) begin
        prev_stg_op9 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_53 == 1'b1) begin
          prev_stg_op9 <= sectionopconvert;
        end
      end
    end // prev_stg_op9_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op10_process
      if (reset == 1'b1) begin
        prev_stg_op10 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_59 == 1'b1) begin
          prev_stg_op10 <= sectionopconvert;
        end
      end
    end // prev_stg_op10_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op11_process
      if (reset == 1'b1) begin
        prev_stg_op11 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_65 == 1'b1) begin
          prev_stg_op11 <= sectionopconvert;
        end
      end
    end // prev_stg_op11_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op12_process
      if (reset == 1'b1) begin
        prev_stg_op12 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_71 == 1'b1) begin
          prev_stg_op12 <= sectionopconvert;
        end
      end
    end // prev_stg_op12_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op13_process
      if (reset == 1'b1) begin
        prev_stg_op13 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_77 == 1'b1) begin
          prev_stg_op13 <= sectionopconvert;
        end
      end
    end // prev_stg_op13_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op14_process
      if (reset == 1'b1) begin
        prev_stg_op14 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_83 == 1'b1) begin
          prev_stg_op14 <= sectionopconvert;
        end
      end
    end // prev_stg_op14_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op15_process
      if (reset == 1'b1) begin
        prev_stg_op15 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_89 == 1'b1) begin
          prev_stg_op15 <= sectionopconvert;
        end
      end
    end // prev_stg_op15_process

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 0.0000000000000000E+00;
        delay_section1[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= storage_state_in1;
        end
      end
    end // delay_process_section1

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 0.0000000000000000E+00;
        delay_section2[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= storage_state_in2;
        end
      end
    end // delay_process_section2

  always @ (posedge clk or posedge reset)
    begin: delay_process_section3
      if (reset == 1'b1) begin
        delay_section3[0] <= 0.0000000000000000E+00;
        delay_section3[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section3[1] <= delay_section3[0];
          delay_section3[0] <= storage_state_in3;
        end
      end
    end // delay_process_section3

  always @ (posedge clk or posedge reset)
    begin: delay_process_section4
      if (reset == 1'b1) begin
        delay_section4[0] <= 0.0000000000000000E+00;
        delay_section4[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section4[1] <= delay_section4[0];
          delay_section4[0] <= storage_state_in4;
        end
      end
    end // delay_process_section4

  always @ (posedge clk or posedge reset)
    begin: delay_process_section5
      if (reset == 1'b1) begin
        delay_section5[0] <= 0.0000000000000000E+00;
        delay_section5[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section5[1] <= delay_section5[0];
          delay_section5[0] <= storage_state_in5;
        end
      end
    end // delay_process_section5

  always @ (posedge clk or posedge reset)
    begin: delay_process_section6
      if (reset == 1'b1) begin
        delay_section6[0] <= 0.0000000000000000E+00;
        delay_section6[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section6[1] <= delay_section6[0];
          delay_section6[0] <= storage_state_in6;
        end
      end
    end // delay_process_section6

  always @ (posedge clk or posedge reset)
    begin: delay_process_section7
      if (reset == 1'b1) begin
        delay_section7[0] <= 0.0000000000000000E+00;
        delay_section7[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section7[1] <= delay_section7[0];
          delay_section7[0] <= storage_state_in7;
        end
      end
    end // delay_process_section7

  always @ (posedge clk or posedge reset)
    begin: delay_process_section8
      if (reset == 1'b1) begin
        delay_section8[0] <= 0.0000000000000000E+00;
        delay_section8[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section8[1] <= delay_section8[0];
          delay_section8[0] <= storage_state_in8;
        end
      end
    end // delay_process_section8

  always @ (posedge clk or posedge reset)
    begin: delay_process_section9
      if (reset == 1'b1) begin
        delay_section9[0] <= 0.0000000000000000E+00;
        delay_section9[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section9[1] <= delay_section9[0];
          delay_section9[0] <= storage_state_in9;
        end
      end
    end // delay_process_section9

  always @ (posedge clk or posedge reset)
    begin: delay_process_section10
      if (reset == 1'b1) begin
        delay_section10[0] <= 0.0000000000000000E+00;
        delay_section10[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section10[1] <= delay_section10[0];
          delay_section10[0] <= storage_state_in10;
        end
      end
    end // delay_process_section10

  always @ (posedge clk or posedge reset)
    begin: delay_process_section11
      if (reset == 1'b1) begin
        delay_section11[0] <= 0.0000000000000000E+00;
        delay_section11[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section11[1] <= delay_section11[0];
          delay_section11[0] <= storage_state_in11;
        end
      end
    end // delay_process_section11

  always @ (posedge clk or posedge reset)
    begin: delay_process_section12
      if (reset == 1'b1) begin
        delay_section12[0] <= 0.0000000000000000E+00;
        delay_section12[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section12[1] <= delay_section12[0];
          delay_section12[0] <= storage_state_in12;
        end
      end
    end // delay_process_section12

  always @ (posedge clk or posedge reset)
    begin: delay_process_section13
      if (reset == 1'b1) begin
        delay_section13[0] <= 0.0000000000000000E+00;
        delay_section13[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section13[1] <= delay_section13[0];
          delay_section13[0] <= storage_state_in13;
        end
      end
    end // delay_process_section13

  always @ (posedge clk or posedge reset)
    begin: delay_process_section14
      if (reset == 1'b1) begin
        delay_section14[0] <= 0.0000000000000000E+00;
        delay_section14[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section14[1] <= delay_section14[0];
          delay_section14[0] <= storage_state_in14;
        end
      end
    end // delay_process_section14

  always @ (posedge clk or posedge reset)
    begin: delay_process_section15
      if (reset == 1'b1) begin
        delay_section15[0] <= 0.0000000000000000E+00;
        delay_section15[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section15[1] <= delay_section15[0];
          delay_section15[0] <= storage_state_in15;
        end
      end
    end // delay_process_section15

  always @ (posedge clk or posedge reset)
    begin: delay_process_section16
      if (reset == 1'b1) begin
        delay_section16[0] <= 0.0000000000000000E+00;
        delay_section16[1] <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section16[1] <= delay_section16[0];
          delay_section16[0] <= storage_state_in16;
        end
      end
    end // delay_process_section16

  // Making common precision for input and state 
  always @* inputmux_section_1 <= (cur_count == 7'b0000000) ? input_register :
                             (cur_count == 7'b0000001) ? delay_section1[0] :
                             (cur_count == 7'b0000010) ? delay_section1[1] :
                             (cur_count == 7'b0000011) ? storage_state_in1 :
                             (cur_count == 7'b0000100) ? delay_section1[0] :
                             (cur_count == 7'b0000101) ? delay_section1[1] :
                             (cur_count == 7'b0000110) ? prev_stg_op1 :
                             (cur_count == 7'b0000111) ? delay_section2[0] :
                             (cur_count == 7'b0001000) ? delay_section2[1] :
                             (cur_count == 7'b0001001) ? storage_state_in2 :
                             (cur_count == 7'b0001010) ? delay_section2[0] :
                             (cur_count == 7'b0001011) ? delay_section2[1] :
                             (cur_count == 7'b0001100) ? prev_stg_op2 :
                             (cur_count == 7'b0001101) ? delay_section3[0] :
                             (cur_count == 7'b0001110) ? delay_section3[1] :
                             (cur_count == 7'b0001111) ? storage_state_in3 :
                             (cur_count == 7'b0010000) ? delay_section3[0] :
                             (cur_count == 7'b0010001) ? delay_section3[1] :
                             (cur_count == 7'b0010010) ? prev_stg_op3 :
                             (cur_count == 7'b0010011) ? delay_section4[0] :
                             (cur_count == 7'b0010100) ? delay_section4[1] :
                             (cur_count == 7'b0010101) ? storage_state_in4 :
                             (cur_count == 7'b0010110) ? delay_section4[0] :
                             (cur_count == 7'b0010111) ? delay_section4[1] :
                             (cur_count == 7'b0011000) ? prev_stg_op4 :
                             (cur_count == 7'b0011001) ? delay_section5[0] :
                             (cur_count == 7'b0011010) ? delay_section5[1] :
                             (cur_count == 7'b0011011) ? storage_state_in5 :
                             (cur_count == 7'b0011100) ? delay_section5[0] :
                             (cur_count == 7'b0011101) ? delay_section5[1] :
                             (cur_count == 7'b0011110) ? prev_stg_op5 :
                             (cur_count == 7'b0011111) ? delay_section6[0] :
                             (cur_count == 7'b0100000) ? delay_section6[1] :
                             (cur_count == 7'b0100001) ? storage_state_in6 :
                             (cur_count == 7'b0100010) ? delay_section6[0] :
                             (cur_count == 7'b0100011) ? delay_section6[1] :
                             (cur_count == 7'b0100100) ? prev_stg_op6 :
                             (cur_count == 7'b0100101) ? delay_section7[0] :
                             (cur_count == 7'b0100110) ? delay_section7[1] :
                             (cur_count == 7'b0100111) ? storage_state_in7 :
                             (cur_count == 7'b0101000) ? delay_section7[0] :
                             (cur_count == 7'b0101001) ? delay_section7[1] :
                             (cur_count == 7'b0101010) ? prev_stg_op7 :
                             (cur_count == 7'b0101011) ? delay_section8[0] :
                             (cur_count == 7'b0101100) ? delay_section8[1] :
                             (cur_count == 7'b0101101) ? storage_state_in8 :
                             (cur_count == 7'b0101110) ? delay_section8[0] :
                             (cur_count == 7'b0101111) ? delay_section8[1] :
                             (cur_count == 7'b0110000) ? prev_stg_op8 :
                             (cur_count == 7'b0110001) ? delay_section9[0] :
                             (cur_count == 7'b0110010) ? delay_section9[1] :
                             (cur_count == 7'b0110011) ? storage_state_in9 :
                             (cur_count == 7'b0110100) ? delay_section9[0] :
                             (cur_count == 7'b0110101) ? delay_section9[1] :
                             (cur_count == 7'b0110110) ? prev_stg_op9 :
                             (cur_count == 7'b0110111) ? delay_section10[0] :
                             (cur_count == 7'b0111000) ? delay_section10[1] :
                             (cur_count == 7'b0111001) ? storage_state_in10 :
                             (cur_count == 7'b0111010) ? delay_section10[0] :
                             (cur_count == 7'b0111011) ? delay_section10[1] :
                             (cur_count == 7'b0111100) ? prev_stg_op10 :
                             (cur_count == 7'b0111101) ? delay_section11[0] :
                             (cur_count == 7'b0111110) ? delay_section11[1] :
                             (cur_count == 7'b0111111) ? storage_state_in11 :
                             (cur_count == 7'b1000000) ? delay_section11[0] :
                             (cur_count == 7'b1000001) ? delay_section11[1] :
                             (cur_count == 7'b1000010) ? prev_stg_op11 :
                             (cur_count == 7'b1000011) ? delay_section12[0] :
                             (cur_count == 7'b1000100) ? delay_section12[1] :
                             (cur_count == 7'b1000101) ? storage_state_in12 :
                             (cur_count == 7'b1000110) ? delay_section12[0] :
                             (cur_count == 7'b1000111) ? delay_section12[1] :
                             (cur_count == 7'b1001000) ? prev_stg_op12 :
                             (cur_count == 7'b1001001) ? delay_section13[0] :
                             (cur_count == 7'b1001010) ? delay_section13[1] :
                             (cur_count == 7'b1001011) ? storage_state_in13 :
                             (cur_count == 7'b1001100) ? delay_section13[0] :
                             (cur_count == 7'b1001101) ? delay_section13[1] :
                             (cur_count == 7'b1001110) ? prev_stg_op13 :
                             (cur_count == 7'b1001111) ? delay_section14[0] :
                             (cur_count == 7'b1010000) ? delay_section14[1] :
                             (cur_count == 7'b1010001) ? storage_state_in14 :
                             (cur_count == 7'b1010010) ? delay_section14[0] :
                             (cur_count == 7'b1010011) ? delay_section14[1] :
                             (cur_count == 7'b1010100) ? prev_stg_op14 :
                             (cur_count == 7'b1010101) ? delay_section15[0] :
                             (cur_count == 7'b1010110) ? delay_section15[1] :
                             (cur_count == 7'b1010111) ? storage_state_in15 :
                             (cur_count == 7'b1011000) ? delay_section15[0] :
                             (cur_count == 7'b1011001) ? delay_section15[1] :
                             (cur_count == 7'b1011010) ? prev_stg_op15 :
                             (cur_count == 7'b1011011) ? delay_section16[0] :
                             (cur_count == 7'b1011100) ? delay_section16[1] :
                             (cur_count == 7'b1011101) ? storage_state_in16 :
                             (cur_count == 7'b1011110) ? delay_section16[0] :
                             delay_section16[1];

  always @* coeffmux_section_1 <= (cur_count == 7'b0000000) ? scaleconst1 :
                             (cur_count == 7'b0000001) ? coeff_a2_section1 :
                             (cur_count == 7'b0000010) ? coeff_a3_section1 :
                             (cur_count == 7'b0000011) ? coeff_b1_section1 :
                             (cur_count == 7'b0000100) ? coeff_b2_section1 :
                             (cur_count == 7'b0000101) ? coeff_b3_section1 :
                             (cur_count == 7'b0000110) ? scaleconst2 :
                             (cur_count == 7'b0000111) ? coeff_a2_section2 :
                             (cur_count == 7'b0001000) ? coeff_a3_section2 :
                             (cur_count == 7'b0001001) ? coeff_b1_section2 :
                             (cur_count == 7'b0001010) ? coeff_b2_section2 :
                             (cur_count == 7'b0001011) ? coeff_b3_section2 :
                             (cur_count == 7'b0001100) ? scaleconst3 :
                             (cur_count == 7'b0001101) ? coeff_a2_section3 :
                             (cur_count == 7'b0001110) ? coeff_a3_section3 :
                             (cur_count == 7'b0001111) ? coeff_b1_section3 :
                             (cur_count == 7'b0010000) ? coeff_b2_section3 :
                             (cur_count == 7'b0010001) ? coeff_b3_section3 :
                             (cur_count == 7'b0010010) ? scaleconst4 :
                             (cur_count == 7'b0010011) ? coeff_a2_section4 :
                             (cur_count == 7'b0010100) ? coeff_a3_section4 :
                             (cur_count == 7'b0010101) ? coeff_b1_section4 :
                             (cur_count == 7'b0010110) ? coeff_b2_section4 :
                             (cur_count == 7'b0010111) ? coeff_b3_section4 :
                             (cur_count == 7'b0011000) ? scaleconst5 :
                             (cur_count == 7'b0011001) ? coeff_a2_section5 :
                             (cur_count == 7'b0011010) ? coeff_a3_section5 :
                             (cur_count == 7'b0011011) ? coeff_b1_section5 :
                             (cur_count == 7'b0011100) ? coeff_b2_section5 :
                             (cur_count == 7'b0011101) ? coeff_b3_section5 :
                             (cur_count == 7'b0011110) ? scaleconst6 :
                             (cur_count == 7'b0011111) ? coeff_a2_section6 :
                             (cur_count == 7'b0100000) ? coeff_a3_section6 :
                             (cur_count == 7'b0100001) ? coeff_b1_section6 :
                             (cur_count == 7'b0100010) ? coeff_b2_section6 :
                             (cur_count == 7'b0100011) ? coeff_b3_section6 :
                             (cur_count == 7'b0100100) ? scaleconst7 :
                             (cur_count == 7'b0100101) ? coeff_a2_section7 :
                             (cur_count == 7'b0100110) ? coeff_a3_section7 :
                             (cur_count == 7'b0100111) ? coeff_b1_section7 :
                             (cur_count == 7'b0101000) ? coeff_b2_section7 :
                             (cur_count == 7'b0101001) ? coeff_b3_section7 :
                             (cur_count == 7'b0101010) ? scaleconst8 :
                             (cur_count == 7'b0101011) ? coeff_a2_section8 :
                             (cur_count == 7'b0101100) ? coeff_a3_section8 :
                             (cur_count == 7'b0101101) ? coeff_b1_section8 :
                             (cur_count == 7'b0101110) ? coeff_b2_section8 :
                             (cur_count == 7'b0101111) ? coeff_b3_section8 :
                             (cur_count == 7'b0110000) ? scaleconst9 :
                             (cur_count == 7'b0110001) ? coeff_a2_section9 :
                             (cur_count == 7'b0110010) ? coeff_a3_section9 :
                             (cur_count == 7'b0110011) ? coeff_b1_section9 :
                             (cur_count == 7'b0110100) ? coeff_b2_section9 :
                             (cur_count == 7'b0110101) ? coeff_b3_section9 :
                             (cur_count == 7'b0110110) ? scaleconst10 :
                             (cur_count == 7'b0110111) ? coeff_a2_section10 :
                             (cur_count == 7'b0111000) ? coeff_a3_section10 :
                             (cur_count == 7'b0111001) ? coeff_b1_section10 :
                             (cur_count == 7'b0111010) ? coeff_b2_section10 :
                             (cur_count == 7'b0111011) ? coeff_b3_section10 :
                             (cur_count == 7'b0111100) ? scaleconst11 :
                             (cur_count == 7'b0111101) ? coeff_a2_section11 :
                             (cur_count == 7'b0111110) ? coeff_a3_section11 :
                             (cur_count == 7'b0111111) ? coeff_b1_section11 :
                             (cur_count == 7'b1000000) ? coeff_b2_section11 :
                             (cur_count == 7'b1000001) ? coeff_b3_section11 :
                             (cur_count == 7'b1000010) ? scaleconst12 :
                             (cur_count == 7'b1000011) ? coeff_a2_section12 :
                             (cur_count == 7'b1000100) ? coeff_a3_section12 :
                             (cur_count == 7'b1000101) ? coeff_b1_section12 :
                             (cur_count == 7'b1000110) ? coeff_b2_section12 :
                             (cur_count == 7'b1000111) ? coeff_b3_section12 :
                             (cur_count == 7'b1001000) ? scaleconst13 :
                             (cur_count == 7'b1001001) ? coeff_a2_section13 :
                             (cur_count == 7'b1001010) ? coeff_a3_section13 :
                             (cur_count == 7'b1001011) ? coeff_b1_section13 :
                             (cur_count == 7'b1001100) ? coeff_b2_section13 :
                             (cur_count == 7'b1001101) ? coeff_b3_section13 :
                             (cur_count == 7'b1001110) ? scaleconst14 :
                             (cur_count == 7'b1001111) ? coeff_a2_section14 :
                             (cur_count == 7'b1010000) ? coeff_a3_section14 :
                             (cur_count == 7'b1010001) ? coeff_b1_section14 :
                             (cur_count == 7'b1010010) ? coeff_b2_section14 :
                             (cur_count == 7'b1010011) ? coeff_b3_section14 :
                             (cur_count == 7'b1010100) ? scaleconst15 :
                             (cur_count == 7'b1010101) ? coeff_a2_section15 :
                             (cur_count == 7'b1010110) ? coeff_a3_section15 :
                             (cur_count == 7'b1010111) ? coeff_b1_section15 :
                             (cur_count == 7'b1011000) ? coeff_b2_section15 :
                             (cur_count == 7'b1011001) ? coeff_b3_section15 :
                             (cur_count == 7'b1011010) ? scaleconst16 :
                             (cur_count == 7'b1011011) ? coeff_a2_section16 :
                             (cur_count == 7'b1011100) ? coeff_a3_section16 :
                             (cur_count == 7'b1011101) ? coeff_b1_section16 :
                             (cur_count == 7'b1011110) ? coeff_b2_section16 :
                             coeff_b3_section16;

  always @* prod <= inputmux_section_1 * coeffmux_section_1;

  always @* prod_den <= prod;


  always @* prod_den_cast_temp <= prod_den;


  always @* prod_den_cast <= prod_den_cast_temp;


  always @* prod_den_cast_neg <= -prod_den_cast;

  always @* prod_num <= prod;


  always @* prod_num_cast_temp <= prod_num;


  always @* prod_num_cast <= prod_num_cast_temp;


  always @* accum_mux_in1 <= (cur_count == 7'b0000000) ? prod_num_cast :
                        (cur_count == 7'b0000001) ? prod_den_cast_neg :
                        (cur_count == 7'b0000010) ? prod_den_cast_neg :
                        (cur_count == 7'b0000011) ? prod_num_cast :
                        (cur_count == 7'b0000100) ? prod_num_cast :
                        (cur_count == 7'b0000101) ? prod_num_cast :
                        (cur_count == 7'b0000110) ? prod_num_cast :
                        (cur_count == 7'b0000111) ? prod_den_cast_neg :
                        (cur_count == 7'b0001000) ? prod_den_cast_neg :
                        (cur_count == 7'b0001001) ? prod_num_cast :
                        (cur_count == 7'b0001010) ? prod_num_cast :
                        (cur_count == 7'b0001011) ? prod_num_cast :
                        (cur_count == 7'b0001100) ? prod_num_cast :
                        (cur_count == 7'b0001101) ? prod_den_cast_neg :
                        (cur_count == 7'b0001110) ? prod_den_cast_neg :
                        (cur_count == 7'b0001111) ? prod_num_cast :
                        (cur_count == 7'b0010000) ? prod_num_cast :
                        (cur_count == 7'b0010001) ? prod_num_cast :
                        (cur_count == 7'b0010010) ? prod_num_cast :
                        (cur_count == 7'b0010011) ? prod_den_cast_neg :
                        (cur_count == 7'b0010100) ? prod_den_cast_neg :
                        (cur_count == 7'b0010101) ? prod_num_cast :
                        (cur_count == 7'b0010110) ? prod_num_cast :
                        (cur_count == 7'b0010111) ? prod_num_cast :
                        (cur_count == 7'b0011000) ? prod_num_cast :
                        (cur_count == 7'b0011001) ? prod_den_cast_neg :
                        (cur_count == 7'b0011010) ? prod_den_cast_neg :
                        (cur_count == 7'b0011011) ? prod_num_cast :
                        (cur_count == 7'b0011100) ? prod_num_cast :
                        (cur_count == 7'b0011101) ? prod_num_cast :
                        (cur_count == 7'b0011110) ? prod_num_cast :
                        (cur_count == 7'b0011111) ? prod_den_cast_neg :
                        (cur_count == 7'b0100000) ? prod_den_cast_neg :
                        (cur_count == 7'b0100001) ? prod_num_cast :
                        (cur_count == 7'b0100010) ? prod_num_cast :
                        (cur_count == 7'b0100011) ? prod_num_cast :
                        (cur_count == 7'b0100100) ? prod_num_cast :
                        (cur_count == 7'b0100101) ? prod_den_cast_neg :
                        (cur_count == 7'b0100110) ? prod_den_cast_neg :
                        (cur_count == 7'b0100111) ? prod_num_cast :
                        (cur_count == 7'b0101000) ? prod_num_cast :
                        (cur_count == 7'b0101001) ? prod_num_cast :
                        (cur_count == 7'b0101010) ? prod_num_cast :
                        (cur_count == 7'b0101011) ? prod_den_cast_neg :
                        (cur_count == 7'b0101100) ? prod_den_cast_neg :
                        (cur_count == 7'b0101101) ? prod_num_cast :
                        (cur_count == 7'b0101110) ? prod_num_cast :
                        (cur_count == 7'b0101111) ? prod_num_cast :
                        (cur_count == 7'b0110000) ? prod_num_cast :
                        (cur_count == 7'b0110001) ? prod_den_cast_neg :
                        (cur_count == 7'b0110010) ? prod_den_cast_neg :
                        (cur_count == 7'b0110011) ? prod_num_cast :
                        (cur_count == 7'b0110100) ? prod_num_cast :
                        (cur_count == 7'b0110101) ? prod_num_cast :
                        (cur_count == 7'b0110110) ? prod_num_cast :
                        (cur_count == 7'b0110111) ? prod_den_cast_neg :
                        (cur_count == 7'b0111000) ? prod_den_cast_neg :
                        (cur_count == 7'b0111001) ? prod_num_cast :
                        (cur_count == 7'b0111010) ? prod_num_cast :
                        (cur_count == 7'b0111011) ? prod_num_cast :
                        (cur_count == 7'b0111100) ? prod_num_cast :
                        (cur_count == 7'b0111101) ? prod_den_cast_neg :
                        (cur_count == 7'b0111110) ? prod_den_cast_neg :
                        (cur_count == 7'b0111111) ? prod_num_cast :
                        (cur_count == 7'b1000000) ? prod_num_cast :
                        (cur_count == 7'b1000001) ? prod_num_cast :
                        (cur_count == 7'b1000010) ? prod_num_cast :
                        (cur_count == 7'b1000011) ? prod_den_cast_neg :
                        (cur_count == 7'b1000100) ? prod_den_cast_neg :
                        (cur_count == 7'b1000101) ? prod_num_cast :
                        (cur_count == 7'b1000110) ? prod_num_cast :
                        (cur_count == 7'b1000111) ? prod_num_cast :
                        (cur_count == 7'b1001000) ? prod_num_cast :
                        (cur_count == 7'b1001001) ? prod_den_cast_neg :
                        (cur_count == 7'b1001010) ? prod_den_cast_neg :
                        (cur_count == 7'b1001011) ? prod_num_cast :
                        (cur_count == 7'b1001100) ? prod_num_cast :
                        (cur_count == 7'b1001101) ? prod_num_cast :
                        (cur_count == 7'b1001110) ? prod_num_cast :
                        (cur_count == 7'b1001111) ? prod_den_cast_neg :
                        (cur_count == 7'b1010000) ? prod_den_cast_neg :
                        (cur_count == 7'b1010001) ? prod_num_cast :
                        (cur_count == 7'b1010010) ? prod_num_cast :
                        (cur_count == 7'b1010011) ? prod_num_cast :
                        (cur_count == 7'b1010100) ? prod_num_cast :
                        (cur_count == 7'b1010101) ? prod_den_cast_neg :
                        (cur_count == 7'b1010110) ? prod_den_cast_neg :
                        (cur_count == 7'b1010111) ? prod_num_cast :
                        (cur_count == 7'b1011000) ? prod_num_cast :
                        (cur_count == 7'b1011001) ? prod_num_cast :
                        (cur_count == 7'b1011010) ? prod_num_cast :
                        (cur_count == 7'b1011011) ? prod_den_cast_neg :
                        (cur_count == 7'b1011100) ? prod_den_cast_neg :
                        (cur_count == 7'b1011101) ? prod_num_cast :
                        (cur_count == 7'b1011110) ? prod_num_cast :
                        prod_num_cast;

  assign final_phase =  phase_0 | phase_3 | phase_6 | phase_9 | phase_12 | phase_15 | phase_18 | phase_21 | phase_24 | phase_27 | phase_30 | phase_33 | phase_36 | phase_39 | phase_42 | phase_45 | phase_48 | phase_51 | phase_54 | phase_57 | phase_60 | phase_63 | phase_66 | phase_69 | phase_72 | phase_75 | phase_78 | phase_81 | phase_84 | phase_87 | phase_90 | phase_93;

  assign section_phase =  phase_0 | phase_6 | phase_12 | phase_18 | phase_24 | phase_30 | phase_36 | phase_42 | phase_48 | phase_54 | phase_60 | phase_66 | phase_72 | phase_78 | phase_84 | phase_90;

  always @* accum_mux_in1_temp <= (section_phase == 1'b1) ? sectionipconvert_cast :
                             accum_mux_in1;

  always @* accum_mux_out <= (final_phase == 1'b1) ? accum_mux_in1_temp :
                        accum_mux_in2;

  always @ (posedge clk or posedge reset)
    begin: accumulator_reg_process
      if (reset == 1'b1) begin
        accum_reg <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          accum_reg <= accum_mux_out;
        end
      end
    end // accumulator_reg_process

  always @* accum_mux_in2 <= accum_reg + accum_mux_in1;

  always @* storagetypeconvert <= accum_mux_out;


  always @* sectionipconvert <= prod;


  always @* sectionipconvert_cast <= sectionipconvert;


  always @* acc_out_cast_numacc <= accum_mux_out;


  always @* sectionopconvert <= acc_out_cast_numacc;


  always @* output_typeconvert <= acc_out_cast_numacc;


  always @ (posedge clk or posedge reset)
    begin: storage_reg1_process
      if (reset == 1'b1) begin
        storage_state_in1 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_2 == 1'b1) begin
          storage_state_in1 <= storagetypeconvert;
        end
      end
    end // storage_reg1_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg2_process
      if (reset == 1'b1) begin
        storage_state_in2 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_8 == 1'b1) begin
          storage_state_in2 <= storagetypeconvert;
        end
      end
    end // storage_reg2_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg3_process
      if (reset == 1'b1) begin
        storage_state_in3 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_14 == 1'b1) begin
          storage_state_in3 <= storagetypeconvert;
        end
      end
    end // storage_reg3_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg4_process
      if (reset == 1'b1) begin
        storage_state_in4 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_20 == 1'b1) begin
          storage_state_in4 <= storagetypeconvert;
        end
      end
    end // storage_reg4_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg5_process
      if (reset == 1'b1) begin
        storage_state_in5 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_26 == 1'b1) begin
          storage_state_in5 <= storagetypeconvert;
        end
      end
    end // storage_reg5_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg6_process
      if (reset == 1'b1) begin
        storage_state_in6 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_32 == 1'b1) begin
          storage_state_in6 <= storagetypeconvert;
        end
      end
    end // storage_reg6_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg7_process
      if (reset == 1'b1) begin
        storage_state_in7 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_38 == 1'b1) begin
          storage_state_in7 <= storagetypeconvert;
        end
      end
    end // storage_reg7_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg8_process
      if (reset == 1'b1) begin
        storage_state_in8 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_44 == 1'b1) begin
          storage_state_in8 <= storagetypeconvert;
        end
      end
    end // storage_reg8_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg9_process
      if (reset == 1'b1) begin
        storage_state_in9 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_50 == 1'b1) begin
          storage_state_in9 <= storagetypeconvert;
        end
      end
    end // storage_reg9_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg10_process
      if (reset == 1'b1) begin
        storage_state_in10 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_56 == 1'b1) begin
          storage_state_in10 <= storagetypeconvert;
        end
      end
    end // storage_reg10_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg11_process
      if (reset == 1'b1) begin
        storage_state_in11 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_62 == 1'b1) begin
          storage_state_in11 <= storagetypeconvert;
        end
      end
    end // storage_reg11_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg12_process
      if (reset == 1'b1) begin
        storage_state_in12 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_68 == 1'b1) begin
          storage_state_in12 <= storagetypeconvert;
        end
      end
    end // storage_reg12_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg13_process
      if (reset == 1'b1) begin
        storage_state_in13 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_74 == 1'b1) begin
          storage_state_in13 <= storagetypeconvert;
        end
      end
    end // storage_reg13_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg14_process
      if (reset == 1'b1) begin
        storage_state_in14 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_80 == 1'b1) begin
          storage_state_in14 <= storagetypeconvert;
        end
      end
    end // storage_reg14_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg15_process
      if (reset == 1'b1) begin
        storage_state_in15 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_86 == 1'b1) begin
          storage_state_in15 <= storagetypeconvert;
        end
      end
    end // storage_reg15_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg16_process
      if (reset == 1'b1) begin
        storage_state_in16 <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_92 == 1'b1) begin
          storage_state_in16 <= storagetypeconvert;
        end
      end
    end // storage_reg16_process

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (phase_95 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // highpass
