-- -------------------------------------------------------------
--
-- Module: bandpass_leastPth
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2022-05-04 17:22:42
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- InputType: signed/unsigned
-- FoldingFactor: 72
-- OptimizeForHDL: on
-- Name: bandpass_leastPth
-- TestBenchName: bandpass_leastPth_tb
-- TestBenchStimulus: chirp 
-- ClockHighTime: 10
-- ClockLowTime: 10

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : Bandpass
-- Specification          : Fst1,Fp1,Fp2,Fst2,Ast1,Ap,Ast2
-- Passband Ripple        : 1 dB
-- First Stopband Atten.  : 60 dB
-- First Passband Edge    : 0.45
-- First Stopband Edge    : 0.35
-- Second Stopband Atten. : 60 dB
-- Second Passband Edge   : 0.55
-- Second Stopband Edge   : 0.65
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 72
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time IIR Filter (real)
-- -------------------------------
-- Filter Structure    : Direct-Form II, Second-Order Sections
-- Number of Sections  : 12
-- Stable              : Yes
-- Linear Phase        : No
-- Arithmetic          : fixed
-- Numerator           : s24,21 -> [-4 4)
-- Denominator         : s24,22 -> [-2 2)
-- Scale Values        : s24,30 -> [-7.812500e-03 7.812500e-03)
-- Input               : s24,23 -> [-1 1)
-- Section Input       : s24,24 -> [-5.000000e-01 5.000000e-01)
-- Section Output      : s24,18 -> [-32 32)
-- Output              : s24,18 -> [-32 32)
-- State               : s24,23 -> [-1 1)
-- Numerator Prod      : s48,44 -> [-8 8)
-- Denominator Prod    : s48,45 -> [-4 4)
-- Numerator Accum     : s40,34 -> [-32 32)
-- Denominator Accum   : s40,35 -> [-16 16)
-- Round Mode          : convergent
-- Overflow Mode       : wrap
-- Cast Before Sum     : true
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY bandpass_leastPth IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    signed(23 DOWNTO 0); -- sfix24_En23
         filter_out                      :   OUT   signed(23 DOWNTO 0)  -- sfix24_En18
         );

END bandpass_leastPth;


----------------------------------------------------------------
--Module Architecture: bandpass_leastPth
----------------------------------------------------------------
ARCHITECTURE rtl OF bandpass_leastPth IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(23 DOWNTO 0); -- sfix24_En23
  -- Constants
  CONSTANT scaleconst1                    : signed(40 DOWNTO 0) := to_signed(6694183, 41); -- sfix41_En30
  CONSTANT coeff_b1_section1              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section1              : signed(40 DOWNTO 0) := to_signed(1084843008, 41); -- sfix41_En30
  CONSTANT coeff_b3_section1              : signed(40 DOWNTO 0) := to_signed(255676928, 41); -- sfix41_En30
  CONSTANT coeff_a2_section1              : signed(40 DOWNTO 0) := to_signed(-2016359168, 41); -- sfix41_En30
  CONSTANT coeff_a3_section1              : signed(40 DOWNTO 0) := to_signed(963502848, 41); -- sfix41_En30
  CONSTANT scaleconst2                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section2              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section2              : signed(40 DOWNTO 0) := to_signed(-2144884736, 41); -- sfix41_En30
  CONSTANT coeff_b3_section2              : signed(40 DOWNTO 0) := to_signed(1073545216, 41); -- sfix41_En30
  CONSTANT coeff_a2_section2              : signed(40 DOWNTO 0) := to_signed(-1983762688, 41); -- sfix41_En30
  CONSTANT coeff_a3_section2              : signed(40 DOWNTO 0) := to_signed(968716800, 41); -- sfix41_En30
  CONSTANT scaleconst3                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section3              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section3              : signed(40 DOWNTO 0) := to_signed(-2038845952, 41); -- sfix41_En30
  CONSTANT coeff_b3_section3              : signed(40 DOWNTO 0) := to_signed(1073739264, 41); -- sfix41_En30
  CONSTANT coeff_a2_section3              : signed(40 DOWNTO 0) := to_signed(-2043846144, 41); -- sfix41_En30
  CONSTANT coeff_a3_section3              : signed(40 DOWNTO 0) := to_signed(1046599936, 41); -- sfix41_En30
  CONSTANT scaleconst4                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section4              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section4              : signed(40 DOWNTO 0) := to_signed(-1811403776, 41); -- sfix41_En30
  CONSTANT coeff_b3_section4              : signed(40 DOWNTO 0) := to_signed(1069101568, 41); -- sfix41_En30
  CONSTANT coeff_a2_section4              : signed(40 DOWNTO 0) := to_signed(-2109574400, 41); -- sfix41_En30
  CONSTANT coeff_a3_section4              : signed(40 DOWNTO 0) := to_signed(1046001152, 41); -- sfix41_En30
  CONSTANT scaleconst5                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section5              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section5              : signed(40 DOWNTO 0) := to_signed(954323968, 41); -- sfix41_En30
  CONSTANT coeff_b3_section5              : signed(40 DOWNTO 0) := to_signed(173408256, 41); -- sfix41_En30
  CONSTANT coeff_a2_section5              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section5              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst6                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section6              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section6              : signed(40 DOWNTO 0) := to_signed(-1997396480, 41); -- sfix41_En30
  CONSTANT coeff_b3_section6              : signed(40 DOWNTO 0) := to_signed(1073540608, 41); -- sfix41_En30
  CONSTANT coeff_a2_section6              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section6              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst7                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section7              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section7              : signed(40 DOWNTO 0) := to_signed(41957376, 41); -- sfix41_En30
  CONSTANT coeff_b3_section7              : signed(40 DOWNTO 0) := to_signed(546341888, 41); -- sfix41_En30
  CONSTANT coeff_a2_section7              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section7              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst8                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section8              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section8              : signed(40 DOWNTO 0) := to_signed(-140777472, 41); -- sfix41_En30
  CONSTANT coeff_b3_section8              : signed(40 DOWNTO 0) := to_signed(873936896, 41); -- sfix41_En30
  CONSTANT coeff_a2_section8              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section8              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst9                    : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section9              : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section9              : signed(40 DOWNTO 0) := to_signed(621965824, 41); -- sfix41_En30
  CONSTANT coeff_b3_section9              : signed(40 DOWNTO 0) := to_signed(348718592, 41); -- sfix41_En30
  CONSTANT coeff_a2_section9              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section9              : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst10                   : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section10             : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section10             : signed(40 DOWNTO 0) := to_signed(1121983488, 41); -- sfix41_En30
  CONSTANT coeff_b3_section10             : signed(40 DOWNTO 0) := to_signed(572862464, 41); -- sfix41_En30
  CONSTANT coeff_a2_section10             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section10             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst11                   : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section11             : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section11             : signed(40 DOWNTO 0) := to_signed(-1270104576, 41); -- sfix41_En30
  CONSTANT coeff_b3_section11             : signed(40 DOWNTO 0) := to_signed(1040333312, 41); -- sfix41_En30
  CONSTANT coeff_a2_section11             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section11             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT scaleconst12                   : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b1_section12             : signed(40 DOWNTO 0) := to_signed(1073741824, 41); -- sfix41_En30
  CONSTANT coeff_b2_section12             : signed(40 DOWNTO 0) := (31 => '0', 26 => '0', 22 DOWNTO 20 => '0', 18 DOWNTO 17 => '0', 11 => '0', 8 DOWNTO 0 => '0',  OTHERS => '1'); -- sfix41_En30
  CONSTANT coeff_b3_section12             : signed(40 DOWNTO 0) := to_signed(1148200960, 41); -- sfix41_En30
  CONSTANT coeff_a2_section12             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT coeff_a3_section12             : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En30
  CONSTANT zeroconstant                   : signed(40 DOWNTO 0) := to_signed(0, 41); -- sfix41_En35
  -- Signals
  SIGNAL input_register                   : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL cur_count                        : unsigned(6 DOWNTO 0); -- ufix7
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_2                          : std_logic; -- boolean
  SIGNAL phase_3                          : std_logic; -- boolean
  SIGNAL phase_5                          : std_logic; -- boolean
  SIGNAL phase_6                          : std_logic; -- boolean
  SIGNAL phase_8                          : std_logic; -- boolean
  SIGNAL phase_9                          : std_logic; -- boolean
  SIGNAL phase_11                         : std_logic; -- boolean
  SIGNAL phase_12                         : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_15                         : std_logic; -- boolean
  SIGNAL phase_17                         : std_logic; -- boolean
  SIGNAL phase_18                         : std_logic; -- boolean
  SIGNAL phase_20                         : std_logic; -- boolean
  SIGNAL phase_21                         : std_logic; -- boolean
  SIGNAL phase_23                         : std_logic; -- boolean
  SIGNAL phase_24                         : std_logic; -- boolean
  SIGNAL phase_26                         : std_logic; -- boolean
  SIGNAL phase_27                         : std_logic; -- boolean
  SIGNAL phase_29                         : std_logic; -- boolean
  SIGNAL phase_30                         : std_logic; -- boolean
  SIGNAL phase_32                         : std_logic; -- boolean
  SIGNAL phase_33                         : std_logic; -- boolean
  SIGNAL phase_35                         : std_logic; -- boolean
  SIGNAL phase_36                         : std_logic; -- boolean
  SIGNAL phase_38                         : std_logic; -- boolean
  SIGNAL phase_39                         : std_logic; -- boolean
  SIGNAL phase_41                         : std_logic; -- boolean
  SIGNAL phase_42                         : std_logic; -- boolean
  SIGNAL phase_44                         : std_logic; -- boolean
  SIGNAL phase_45                         : std_logic; -- boolean
  SIGNAL phase_47                         : std_logic; -- boolean
  SIGNAL phase_48                         : std_logic; -- boolean
  SIGNAL phase_50                         : std_logic; -- boolean
  SIGNAL phase_51                         : std_logic; -- boolean
  SIGNAL phase_53                         : std_logic; -- boolean
  SIGNAL phase_54                         : std_logic; -- boolean
  SIGNAL phase_56                         : std_logic; -- boolean
  SIGNAL phase_57                         : std_logic; -- boolean
  SIGNAL phase_59                         : std_logic; -- boolean
  SIGNAL phase_60                         : std_logic; -- boolean
  SIGNAL phase_62                         : std_logic; -- boolean
  SIGNAL phase_63                         : std_logic; -- boolean
  SIGNAL phase_65                         : std_logic; -- boolean
  SIGNAL phase_66                         : std_logic; -- boolean
  SIGNAL phase_68                         : std_logic; -- boolean
  SIGNAL phase_69                         : std_logic; -- boolean
  SIGNAL phase_71                         : std_logic; -- boolean
  SIGNAL sectionipconvert                 : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL storagetypeconvert               : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL prev_stg_op1                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op2                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op3                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op4                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op5                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op6                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op7                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op8                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op9                     : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op10                    : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL prev_stg_op11                    : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL storage_state_in1                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section1                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in2                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section2                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in3                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section3                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in4                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section4                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in5                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section5                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in6                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section6                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in7                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section7                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in8                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section8                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in9                : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section9                   : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in10               : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section10                  : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in11               : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section11                  : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL storage_state_in12               : signed(23 DOWNTO 0); -- sfix24_En23
  SIGNAL delay_section12                  : delay_pipeline_type(0 TO 1); -- sfix24_En23
  SIGNAL input_section1_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section1_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section11_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section12_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section2_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section2_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section21_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section22_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section3_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section3_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section31_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section32_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section4_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section4_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section41_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section42_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section5_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section5_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section51_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section52_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section6_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section6_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section61_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section62_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section7_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section7_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section71_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section72_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section8_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section8_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section81_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section82_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section9_cast              : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section9_cast         : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section91_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section92_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section10_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section10_cast        : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section101_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section102_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section11_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section11_cast        : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section111_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section112_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL input_section12_cast             : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL storage_in_section12_cast        : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section121_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL delay_section122_cast            : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL inputmux_section_1               : signed(28 DOWNTO 0); -- sfix29_En23
  SIGNAL coeffmux_section_1               : signed(40 DOWNTO 0); -- sfix41_En30
  SIGNAL prod                             : signed(69 DOWNTO 0); -- sfix70_En53
  SIGNAL prod_den                         : signed(47 DOWNTO 0); -- sfix48_En45
  SIGNAL prod_den_cast_temp               : signed(39 DOWNTO 0); -- sfix40_En35
  SIGNAL prod_den_cast                    : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL prod_den_cast_neg                : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL unaryminus_temp                  : signed(41 DOWNTO 0); -- sfix42_En35
  SIGNAL prod_num                         : signed(47 DOWNTO 0); -- sfix48_En44
  SIGNAL prod_num_cast_temp               : signed(39 DOWNTO 0); -- sfix40_En34
  SIGNAL prod_num_cast                    : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL accum_mux_in1                    : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL accum_mux_in2                    : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL acc_sum                          : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL sum_den                          : signed(39 DOWNTO 0); -- sfix40_En35
  SIGNAL sum_den_cast                     : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL sum_num                          : signed(39 DOWNTO 0); -- sfix40_En34
  SIGNAL sum_num_cast                     : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL accum_mux_out                    : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL accum_mux_in1_temp               : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL bypass_sectionipscale_phase      : std_logic; -- boolean
  SIGNAL accum_mux_temp1                  : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL accum_mux_temp2                  : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL sectionipconvert_cast            : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL final_phase                      : std_logic; -- boolean
  SIGNAL section_phase                    : std_logic; -- boolean
  SIGNAL accum_reg                        : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL add_cast                         : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL add_cast_1                       : signed(40 DOWNTO 0); -- sfix41_En35
  SIGNAL add_temp                         : signed(41 DOWNTO 0); -- sfix42_En35
  SIGNAL acc_out_cast_numacc              : signed(39 DOWNTO 0); -- sfix40_En34
  SIGNAL sectionopconvert                 : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL output_typeconvert               : signed(23 DOWNTO 0); -- sfix24_En18
  SIGNAL output_register                  : signed(23 DOWNTO 0); -- sfix24_En18


BEGIN

  -- Block Statements
  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= filter_in;
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 7);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(71, 7) THEN
          cur_count <= to_unsigned(0, 7);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 7);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 7) AND clk_enable = '1' ELSE '0';

  phase_2 <= '1' WHEN cur_count = to_unsigned(2, 7) AND clk_enable = '1' ELSE '0';

  phase_3 <= '1' WHEN cur_count = to_unsigned(3, 7) AND clk_enable = '1' ELSE '0';

  phase_5 <= '1' WHEN cur_count = to_unsigned(5, 7) AND clk_enable = '1' ELSE '0';

  phase_6 <= '1' WHEN cur_count = to_unsigned(6, 7) AND clk_enable = '1' ELSE '0';

  phase_8 <= '1' WHEN cur_count = to_unsigned(8, 7) AND clk_enable = '1' ELSE '0';

  phase_9 <= '1' WHEN cur_count = to_unsigned(9, 7) AND clk_enable = '1' ELSE '0';

  phase_11 <= '1' WHEN cur_count = to_unsigned(11, 7) AND clk_enable = '1' ELSE '0';

  phase_12 <= '1' WHEN cur_count = to_unsigned(12, 7) AND clk_enable = '1' ELSE '0';

  phase_14 <= '1' WHEN cur_count = to_unsigned(14, 7) AND clk_enable = '1' ELSE '0';

  phase_15 <= '1' WHEN cur_count = to_unsigned(15, 7) AND clk_enable = '1' ELSE '0';

  phase_17 <= '1' WHEN cur_count = to_unsigned(17, 7) AND clk_enable = '1' ELSE '0';

  phase_18 <= '1' WHEN cur_count = to_unsigned(18, 7) AND clk_enable = '1' ELSE '0';

  phase_20 <= '1' WHEN cur_count = to_unsigned(20, 7) AND clk_enable = '1' ELSE '0';

  phase_21 <= '1' WHEN cur_count = to_unsigned(21, 7) AND clk_enable = '1' ELSE '0';

  phase_23 <= '1' WHEN cur_count = to_unsigned(23, 7) AND clk_enable = '1' ELSE '0';

  phase_24 <= '1' WHEN cur_count = to_unsigned(24, 7) AND clk_enable = '1' ELSE '0';

  phase_26 <= '1' WHEN cur_count = to_unsigned(26, 7) AND clk_enable = '1' ELSE '0';

  phase_27 <= '1' WHEN cur_count = to_unsigned(27, 7) AND clk_enable = '1' ELSE '0';

  phase_29 <= '1' WHEN cur_count = to_unsigned(29, 7) AND clk_enable = '1' ELSE '0';

  phase_30 <= '1' WHEN cur_count = to_unsigned(30, 7) AND clk_enable = '1' ELSE '0';

  phase_32 <= '1' WHEN cur_count = to_unsigned(32, 7) AND clk_enable = '1' ELSE '0';

  phase_33 <= '1' WHEN cur_count = to_unsigned(33, 7) AND clk_enable = '1' ELSE '0';

  phase_35 <= '1' WHEN cur_count = to_unsigned(35, 7) AND clk_enable = '1' ELSE '0';

  phase_36 <= '1' WHEN cur_count = to_unsigned(36, 7) AND clk_enable = '1' ELSE '0';

  phase_38 <= '1' WHEN cur_count = to_unsigned(38, 7) AND clk_enable = '1' ELSE '0';

  phase_39 <= '1' WHEN cur_count = to_unsigned(39, 7) AND clk_enable = '1' ELSE '0';

  phase_41 <= '1' WHEN cur_count = to_unsigned(41, 7) AND clk_enable = '1' ELSE '0';

  phase_42 <= '1' WHEN cur_count = to_unsigned(42, 7) AND clk_enable = '1' ELSE '0';

  phase_44 <= '1' WHEN cur_count = to_unsigned(44, 7) AND clk_enable = '1' ELSE '0';

  phase_45 <= '1' WHEN cur_count = to_unsigned(45, 7) AND clk_enable = '1' ELSE '0';

  phase_47 <= '1' WHEN cur_count = to_unsigned(47, 7) AND clk_enable = '1' ELSE '0';

  phase_48 <= '1' WHEN cur_count = to_unsigned(48, 7) AND clk_enable = '1' ELSE '0';

  phase_50 <= '1' WHEN cur_count = to_unsigned(50, 7) AND clk_enable = '1' ELSE '0';

  phase_51 <= '1' WHEN cur_count = to_unsigned(51, 7) AND clk_enable = '1' ELSE '0';

  phase_53 <= '1' WHEN cur_count = to_unsigned(53, 7) AND clk_enable = '1' ELSE '0';

  phase_54 <= '1' WHEN cur_count = to_unsigned(54, 7) AND clk_enable = '1' ELSE '0';

  phase_56 <= '1' WHEN cur_count = to_unsigned(56, 7) AND clk_enable = '1' ELSE '0';

  phase_57 <= '1' WHEN cur_count = to_unsigned(57, 7) AND clk_enable = '1' ELSE '0';

  phase_59 <= '1' WHEN cur_count = to_unsigned(59, 7) AND clk_enable = '1' ELSE '0';

  phase_60 <= '1' WHEN cur_count = to_unsigned(60, 7) AND clk_enable = '1' ELSE '0';

  phase_62 <= '1' WHEN cur_count = to_unsigned(62, 7) AND clk_enable = '1' ELSE '0';

  phase_63 <= '1' WHEN cur_count = to_unsigned(63, 7) AND clk_enable = '1' ELSE '0';

  phase_65 <= '1' WHEN cur_count = to_unsigned(65, 7) AND clk_enable = '1' ELSE '0';

  phase_66 <= '1' WHEN cur_count = to_unsigned(66, 7) AND clk_enable = '1' ELSE '0';

  phase_68 <= '1' WHEN cur_count = to_unsigned(68, 7) AND clk_enable = '1' ELSE '0';

  phase_69 <= '1' WHEN cur_count = to_unsigned(69, 7) AND clk_enable = '1' ELSE '0';

  phase_71 <= '1' WHEN cur_count = to_unsigned(71, 7) AND clk_enable = '1' ELSE '0';


  -- Next stage input = Previous stage output. Storing Previous stage output
  prev_stg_op1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_5 = '1' THEN
        prev_stg_op1 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op1_process;

  prev_stg_op2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_11 = '1' THEN
        prev_stg_op2 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op2_process;

  prev_stg_op3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_17 = '1' THEN
        prev_stg_op3 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op3_process;

  prev_stg_op4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_23 = '1' THEN
        prev_stg_op4 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op4_process;

  prev_stg_op5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_29 = '1' THEN
        prev_stg_op5 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op5_process;

  prev_stg_op6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_35 = '1' THEN
        prev_stg_op6 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op6_process;

  prev_stg_op7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_41 = '1' THEN
        prev_stg_op7 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op7_process;

  prev_stg_op8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_47 = '1' THEN
        prev_stg_op8 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op8_process;

  prev_stg_op9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_53 = '1' THEN
        prev_stg_op9 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op9_process;

  prev_stg_op10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op10 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_59 = '1' THEN
        prev_stg_op10 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op10_process;

  prev_stg_op11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prev_stg_op11 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_65 = '1' THEN
        prev_stg_op11 <= sectionopconvert;
      END IF;
    END IF; 
  END PROCESS prev_stg_op11_process;

  delay_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section1(1) <= delay_section1(0);
        delay_section1(0) <= storage_state_in1;
      END IF;
    END IF;
  END PROCESS delay_process_section1;

  delay_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section2(1) <= delay_section2(0);
        delay_section2(0) <= storage_state_in2;
      END IF;
    END IF;
  END PROCESS delay_process_section2;

  delay_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section3(1) <= delay_section3(0);
        delay_section3(0) <= storage_state_in3;
      END IF;
    END IF;
  END PROCESS delay_process_section3;

  delay_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section4 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section4(1) <= delay_section4(0);
        delay_section4(0) <= storage_state_in4;
      END IF;
    END IF;
  END PROCESS delay_process_section4;

  delay_process_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section5 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section5(1) <= delay_section5(0);
        delay_section5(0) <= storage_state_in5;
      END IF;
    END IF;
  END PROCESS delay_process_section5;

  delay_process_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section6 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section6(1) <= delay_section6(0);
        delay_section6(0) <= storage_state_in6;
      END IF;
    END IF;
  END PROCESS delay_process_section6;

  delay_process_section7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section7 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section7(1) <= delay_section7(0);
        delay_section7(0) <= storage_state_in7;
      END IF;
    END IF;
  END PROCESS delay_process_section7;

  delay_process_section8 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section8 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section8(1) <= delay_section8(0);
        delay_section8(0) <= storage_state_in8;
      END IF;
    END IF;
  END PROCESS delay_process_section8;

  delay_process_section9 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section9 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section9(1) <= delay_section9(0);
        delay_section9(0) <= storage_state_in9;
      END IF;
    END IF;
  END PROCESS delay_process_section9;

  delay_process_section10 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section10 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section10(1) <= delay_section10(0);
        delay_section10(0) <= storage_state_in10;
      END IF;
    END IF;
  END PROCESS delay_process_section10;

  delay_process_section11 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section11 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section11(1) <= delay_section11(0);
        delay_section11(0) <= storage_state_in11;
      END IF;
    END IF;
  END PROCESS delay_process_section11;

  delay_process_section12 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section12 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_section12(1) <= delay_section12(0);
        delay_section12(0) <= storage_state_in12;
      END IF;
    END IF;
  END PROCESS delay_process_section12;

  -- Making common precision for input and state 
  input_section1_cast <= resize(input_register, 29);

  delay_section11_cast <= resize(delay_section1(0), 29);

  delay_section12_cast <= resize(delay_section1(1), 29);

  storage_in_section1_cast <= resize(storage_state_in1, 29);

  input_section2_cast <= resize(prev_stg_op1(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section21_cast <= resize(delay_section2(0), 29);

  delay_section22_cast <= resize(delay_section2(1), 29);

  storage_in_section2_cast <= resize(storage_state_in2, 29);

  input_section3_cast <= resize(prev_stg_op2(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section31_cast <= resize(delay_section3(0), 29);

  delay_section32_cast <= resize(delay_section3(1), 29);

  storage_in_section3_cast <= resize(storage_state_in3, 29);

  input_section4_cast <= resize(prev_stg_op3(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section41_cast <= resize(delay_section4(0), 29);

  delay_section42_cast <= resize(delay_section4(1), 29);

  storage_in_section4_cast <= resize(storage_state_in4, 29);

  input_section5_cast <= resize(prev_stg_op4(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section51_cast <= resize(delay_section5(0), 29);

  delay_section52_cast <= resize(delay_section5(1), 29);

  storage_in_section5_cast <= resize(storage_state_in5, 29);

  input_section6_cast <= resize(prev_stg_op5(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section61_cast <= resize(delay_section6(0), 29);

  delay_section62_cast <= resize(delay_section6(1), 29);

  storage_in_section6_cast <= resize(storage_state_in6, 29);

  input_section7_cast <= resize(prev_stg_op6(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section71_cast <= resize(delay_section7(0), 29);

  delay_section72_cast <= resize(delay_section7(1), 29);

  storage_in_section7_cast <= resize(storage_state_in7, 29);

  input_section8_cast <= resize(prev_stg_op7(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section81_cast <= resize(delay_section8(0), 29);

  delay_section82_cast <= resize(delay_section8(1), 29);

  storage_in_section8_cast <= resize(storage_state_in8, 29);

  input_section9_cast <= resize(prev_stg_op8(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section91_cast <= resize(delay_section9(0), 29);

  delay_section92_cast <= resize(delay_section9(1), 29);

  storage_in_section9_cast <= resize(storage_state_in9, 29);

  input_section10_cast <= resize(prev_stg_op9(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section101_cast <= resize(delay_section10(0), 29);

  delay_section102_cast <= resize(delay_section10(1), 29);

  storage_in_section10_cast <= resize(storage_state_in10, 29);

  input_section11_cast <= resize(prev_stg_op10(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section111_cast <= resize(delay_section11(0), 29);

  delay_section112_cast <= resize(delay_section11(1), 29);

  storage_in_section11_cast <= resize(storage_state_in11, 29);

  input_section12_cast <= resize(prev_stg_op11(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0', 29);

  delay_section121_cast <= resize(delay_section12(0), 29);

  delay_section122_cast <= resize(delay_section12(1), 29);

  storage_in_section12_cast <= resize(storage_state_in12, 29);

  inputmux_section_1 <= input_section1_cast WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                             delay_section11_cast WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                             delay_section12_cast WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                             storage_in_section1_cast WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                             delay_section11_cast WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                             delay_section12_cast WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                             input_section2_cast WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                             delay_section21_cast WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                             delay_section22_cast WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                             storage_in_section2_cast WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                             delay_section21_cast WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                             delay_section22_cast WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                             input_section3_cast WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                             delay_section31_cast WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                             delay_section32_cast WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                             storage_in_section3_cast WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                             delay_section31_cast WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                             delay_section32_cast WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                             input_section4_cast WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                             delay_section41_cast WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                             delay_section42_cast WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                             storage_in_section4_cast WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                             delay_section41_cast WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                             delay_section42_cast WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                             input_section5_cast WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                             delay_section51_cast WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                             delay_section52_cast WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                             storage_in_section5_cast WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                             delay_section51_cast WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                             delay_section52_cast WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                             input_section6_cast WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                             delay_section61_cast WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                             delay_section62_cast WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                             storage_in_section6_cast WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                             delay_section61_cast WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                             delay_section62_cast WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                             input_section7_cast WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                             delay_section71_cast WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                             delay_section72_cast WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                             storage_in_section7_cast WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                             delay_section71_cast WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                             delay_section72_cast WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                             input_section8_cast WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                             delay_section81_cast WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                             delay_section82_cast WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                             storage_in_section8_cast WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                             delay_section81_cast WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                             delay_section82_cast WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                             input_section9_cast WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                             delay_section91_cast WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                             delay_section92_cast WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                             storage_in_section9_cast WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                             delay_section91_cast WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                             delay_section92_cast WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                             input_section10_cast WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                             delay_section101_cast WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                             delay_section102_cast WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                             storage_in_section10_cast WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                             delay_section101_cast WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                             delay_section102_cast WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                             input_section11_cast WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                             delay_section111_cast WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                             delay_section112_cast WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                             storage_in_section11_cast WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                             delay_section111_cast WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                             delay_section112_cast WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                             input_section12_cast WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                             delay_section121_cast WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                             delay_section122_cast WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                             storage_in_section12_cast WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                             delay_section121_cast WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                             delay_section122_cast;

  coeffmux_section_1 <= scaleconst1 WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                             coeff_a2_section1 WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                             coeff_a3_section1 WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                             coeff_b1_section1 WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                             coeff_b2_section1 WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                             coeff_b3_section1 WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                             scaleconst2 WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                             coeff_a2_section2 WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                             coeff_a3_section2 WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                             coeff_b1_section2 WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                             coeff_b2_section2 WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                             coeff_b3_section2 WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                             scaleconst3 WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                             coeff_a2_section3 WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                             coeff_a3_section3 WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                             coeff_b1_section3 WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                             coeff_b2_section3 WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                             coeff_b3_section3 WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                             scaleconst4 WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                             coeff_a2_section4 WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                             coeff_a3_section4 WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                             coeff_b1_section4 WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                             coeff_b2_section4 WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                             coeff_b3_section4 WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                             scaleconst5 WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                             coeff_a2_section5 WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                             coeff_a3_section5 WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                             coeff_b1_section5 WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                             coeff_b2_section5 WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                             coeff_b3_section5 WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                             scaleconst6 WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                             coeff_a2_section6 WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                             coeff_a3_section6 WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                             coeff_b1_section6 WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                             coeff_b2_section6 WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                             coeff_b3_section6 WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                             scaleconst7 WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                             coeff_a2_section7 WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                             coeff_a3_section7 WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                             coeff_b1_section7 WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                             coeff_b2_section7 WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                             coeff_b3_section7 WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                             scaleconst8 WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                             coeff_a2_section8 WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                             coeff_a3_section8 WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                             coeff_b1_section8 WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                             coeff_b2_section8 WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                             coeff_b3_section8 WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                             scaleconst9 WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                             coeff_a2_section9 WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                             coeff_a3_section9 WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                             coeff_b1_section9 WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                             coeff_b2_section9 WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                             coeff_b3_section9 WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                             scaleconst10 WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                             coeff_a2_section10 WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                             coeff_a3_section10 WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                             coeff_b1_section10 WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                             coeff_b2_section10 WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                             coeff_b3_section10 WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                             scaleconst11 WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                             coeff_a2_section11 WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                             coeff_a3_section11 WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                             coeff_b1_section11 WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                             coeff_b2_section11 WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                             coeff_b3_section11 WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                             scaleconst12 WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                             coeff_a2_section12 WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                             coeff_a3_section12 WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                             coeff_b1_section12 WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                             coeff_b2_section12 WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                             coeff_b3_section12;

  prod <= inputmux_section_1 * coeffmux_section_1;

  prod_den <= resize(shift_right(prod(55 DOWNTO 0) + ( "0" & (prod(8) & NOT prod(8) & NOT prod(8) & NOT prod(8) & NOT prod(8) & NOT prod(8) & NOT prod(8) & NOT prod(8))), 8), 48);

  prod_den_cast_temp <= resize(shift_right(prod_den(47) & prod_den(47 DOWNTO 0) + ( "0" & (prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10) & NOT prod_den(10))), 10), 40);

  prod_den_cast <= resize(prod_den_cast_temp, 41);

  unaryminus_temp <= ('0' & prod_den_cast) WHEN prod_den_cast = "10000000000000000000000000000000000000000"
      ELSE -resize(prod_den_cast,42);
  prod_den_cast_neg <= unaryminus_temp(40 DOWNTO 0);

  prod_num <= resize(shift_right(prod(56 DOWNTO 0) + ( "0" & (prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9) & NOT prod(9))), 9), 48);

  prod_num_cast_temp <= resize(shift_right(prod_num(47) & prod_num(47 DOWNTO 0) + ( "0" & (prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10) & NOT prod_num(10))), 10), 40);

  prod_num_cast <= resize(prod_num_cast_temp(39 DOWNTO 0) & '0', 41);

  accum_mux_in1 <= prod_num_cast WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                        prod_den_cast_neg WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                        prod_num_cast WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                        prod_num_cast;

  sum_den <= acc_sum(39 DOWNTO 0);

  sum_den_cast <= resize(sum_den, 41);

  sum_num <= resize(shift_right(acc_sum(40 DOWNTO 0) + ( "0" & (acc_sum(1))), 1), 40);

  sum_num_cast <= resize(sum_num(39 DOWNTO 0) & '0', 41);

  accum_mux_in2 <= sum_num_cast WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                        sum_den_cast WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                        sum_num_cast WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                        sum_num_cast;

  bypass_sectionipscale_phase <=  phase_6 OR phase_12 OR phase_18 OR phase_24 OR phase_30 OR phase_36 OR phase_42 OR phase_48 OR phase_54 OR phase_60 OR phase_66;

  accum_mux_out <= accum_mux_in2 WHEN ( bypass_sectionipscale_phase = '1' ) ELSE
                        accum_mux_temp1;

  accum_mux_temp2 <= zeroconstant WHEN ( bypass_sectionipscale_phase = '1' ) ELSE
                          accum_mux_in1;
  final_phase <=  phase_0 OR phase_3 OR phase_6 OR phase_9 OR phase_12 OR phase_15 OR phase_18 OR phase_21 OR phase_24 OR phase_27 OR phase_30 OR phase_33 OR phase_36 OR phase_39 OR phase_42 OR phase_45 OR phase_48 OR phase_51 OR phase_54 OR phase_57 OR phase_60 OR phase_63 OR phase_66 OR phase_69;

  section_phase <=  phase_0 OR phase_6 OR phase_12 OR phase_18 OR phase_24 OR phase_30 OR phase_36 OR phase_42 OR phase_48 OR phase_54 OR phase_60 OR phase_66;

  accum_mux_in1_temp <= sectionipconvert_cast WHEN ( section_phase = '1' ) ELSE
                             accum_mux_in1;

  accum_mux_temp1 <= accum_mux_in1_temp WHEN ( final_phase = '1' ) ELSE
                          accum_mux_in2;

  accumulator_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accum_reg <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accum_reg <= accum_mux_out;
      END IF;
    END IF; 
  END PROCESS accumulator_reg_process;

  add_cast <= accum_reg;
  add_cast_1 <= accum_mux_temp2;
  add_temp <= resize(add_cast, 42) + resize(add_cast_1, 42);
  acc_sum <= add_temp(40 DOWNTO 0);

  storagetypeconvert <= resize(shift_right(accum_mux_out(35 DOWNTO 0) + ( "0" & (accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12) & NOT accum_mux_out(12))), 12), 24);

  sectionipconvert <= resize(shift_right(prod(52 DOWNTO 0) + ( "0" & (prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29) & NOT prod(29))), 29), 24);

  sectionipconvert_cast <= resize(sectionipconvert(23 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 41);

  acc_out_cast_numacc <= resize(shift_right(accum_mux_out(40 DOWNTO 0) + ( "0" & (accum_mux_out(1))), 1), 40);

  sectionopconvert <= resize(shift_right(acc_out_cast_numacc(39 DOWNTO 0) + ( "0" & (acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16))), 16), 24);

  output_typeconvert <= resize(shift_right(acc_out_cast_numacc(39 DOWNTO 0) + ( "0" & (acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16) & NOT acc_out_cast_numacc(16))), 16), 24);

  storage_reg1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_2 = '1' THEN
        storage_state_in1 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg1_process;

  storage_reg2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_8 = '1' THEN
        storage_state_in2 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg2_process;

  storage_reg3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_14 = '1' THEN
        storage_state_in3 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg3_process;

  storage_reg4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_20 = '1' THEN
        storage_state_in4 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg4_process;

  storage_reg5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_26 = '1' THEN
        storage_state_in5 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg5_process;

  storage_reg6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_32 = '1' THEN
        storage_state_in6 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg6_process;

  storage_reg7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_38 = '1' THEN
        storage_state_in7 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg7_process;

  storage_reg8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_44 = '1' THEN
        storage_state_in8 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg8_process;

  storage_reg9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_50 = '1' THEN
        storage_state_in9 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg9_process;

  storage_reg10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in10 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_56 = '1' THEN
        storage_state_in10 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg10_process;

  storage_reg11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in11 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_62 = '1' THEN
        storage_state_in11 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg11_process;

  storage_reg12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      storage_state_in12 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_68 = '1' THEN
        storage_state_in12 <= storagetypeconvert;
      END IF;
    END IF; 
  END PROCESS storage_reg12_process;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_71 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= output_register;
END rtl;
